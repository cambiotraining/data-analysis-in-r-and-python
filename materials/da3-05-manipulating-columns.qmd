---
title: Manipulating columns
---

::: {.callout-tip}
#### Learning objectives

- Learn how to select and/or rename specific columns from a data frame
- Be able to create new columns and modify existing ones
:::


## Context

In the [tabular data](#tabular-data) section we learned to deal with, well, tabular data in the form of our `surveys` data set. This data set isn't huge, but sometimes we have many variables and we might only want to work with a subset of them. Or, we might want to create new columns based on existing data. In this section we'll cover how we can do this.

## Section setup {#setup_plotting}

::: {.callout-note collapse="true"}
## Click to expand

::: {.panel-tabset group="language"}
## R

We'll continue this section with the script named `r paste0(intToUtf8(96), sub("\\..*$", ".R", knitr::current_input()), intToUtf8(96))`. If needed, add the following code to the top of your script and run it.

```{r}
#| message: false
# A collection of R packages designed for data science
library(tidyverse)

surveys <- read_csv("data/surveys.csv")
```

## Python

We'll continue this section with the script named `r paste0(intToUtf8(96), sub("\\..*$", ".py", knitr::current_input()), intToUtf8(96))`. If needed, add the following code to the top of your script and run it.

```{python}
# A Python data analysis and manipulation tool
import pandas as pd

# Python equivalent of `ggplot2`
from plotnine import *

surveys = pd.read_csv("data/surveys.csv")
```

:::
:::

## Selecting columns

Let's remind ourselves to which columns we have in our `surveys` data set. After that, we'll start making some changes.

::: {.panel-tabset group="language"}
## R

```{r}
colnames(surveys)
```
 
## Python

```{python}
surveys.columns
```

:::

### Selecting individual columns

Let's say we wanted to select only the `record_id` and `year` columns. We've briefly done this when we looked at [subsetting rows and columns](#subset_rc).

::: {.panel-tabset group="language"}
## R

However, there is an alternative way of doing this using the `dplyr` package - which is part of `tidyverse`.
 
 We can use the `select()` function:
 
```{r}
select(surveys, record_id, year)
```
 
Using the base R syntax, this is equivalent to `surveys[, c("record_id", "year")]`. Notice that with the `select()` function (and generally with `dplyr` functions) we didnâ€™t need to quote " the column names. This is because the first input to the function is the table name, and so everything after is assumed to be column names of that table.

## Python

The way we need to specify this is by giving a list of column names `["record_id", "year"]` and subsetting the surveys data set with this.

The way we subset is with `surveys[ ]`, so we end up with double square brackets:

```{python}
surveys[["record_id", "year"]]
```

:::

### Selecting with helper functions

::: {.panel-tabset group="language"}
## R

The `select()` function becomes particularly useful when we combine it with other helper functions. For example, this code will select all the columns where the column name contains the string (text) `"_id"`:

```{r}
# returns all columns where the column name contains the text "_id"
select(surveys, contains("_id"))
```

## Python

The subsetting becomes a bit tedious when we're looking for patterns in the column names. Here, we can instead use the `.filter` attribute of the surveys data set, and look for a string (text) where the column name contains `"_id"`.

```{python}
surveys.filter(like = "_id")
```


:::

### Selecting a range of columns

Let's say we're interested in all the columns from `record_id` to `year`.

::: {.panel-tabset group="language"}
## R
In that case, we can use the `:` symbol.

```{r}
# returns all columns between and including record_id and year
select(surveys, record_id:year)
```

We can also combine this with the previous method:

```{r}
# returns all columns between and including record_id and year
# and all columns where the column name contains the text "_id"
select(surveys, record_id:year, contains("_id"))
```

## Python

In that case, we can use the `:` symbol, in combination with the `.loc` indexer.

```{python}
surveys.loc[:, "record_id":"year"]
```


:::

### Unselecting columns

Lastly, we can also **unselect columns**. This can be useful when you want most columns, apart from some.

::: {.panel-tabset group="language"}
## R

To do this, we use the `-` symbol before the column name.

```{r}
# returns all columns apart from record_id
select(surveys, -record_id)
```

## Python

To do this, we use the `.drop` attribute. Here, we only unselect one column, but we can easily extend this by providing a list of columns do the `column =` argument.

```{python}
surveys.drop(columns = "record_id")
```

:::

## Renaming and reshuffling columns

### Renaming columns

For example, we might want to change the `weight` column name to `weight_g`, to reflect that the values are in grams.

::: {.panel-tabset group="language"}
## R
We can use the `rename()` function to change a column name. We do this as follows:

```{r}
rename(surveys, weight_g = weight)
```

## Python

We can use the `.rename()` attribute of the `surveys` Pandas data frame:

```{python}
surveys.rename(columns = {'weight': 'weight_g'})
```

:::

### Reshuffling columns

It might be that you want to reorder/reshuffle a column. Here, the `year` column is our fourth variable. Let's say we'd want to  move this to the second position (after `record_id`).

::: {.panel-tabset group="language"}
## R

We can use the `relocate()` function to do this. The function has several arguments, starting with `.`, such as `.before =` or `.after =`. These allow you to specify where you want to reinsert the column.

```{r}
relocate(surveys, year, .after = record_id)
```


## Python

Unlike in R, there isn't a very clear, straightforward way of reinserting columns in a Pandas data frame. We could show you convoluted ways of doing so, but at this point that's just confusing. So, we'll leave you with a [link to a Stackoverflow solution](https://stackoverflow.com/questions/13148429/how-to-change-the-order-of-dataframe-columns).
:::

## Creating new columns

Sometimes we need to create new columns. For example, we might have a variable that is not in the unit of measurement we need (e.g. in millimeters, instead of centimeters).

Conceptually, that looks something like this:

![Creating a new column using data from an existing one.](images/manipulation-new_column.png){#fig-manipulation_new}

Let's illustrate this with an example on our `surveys` data set. Let's say we wanted to get `hindfoot_length` in centimeters, instead of millimeters. We'd have to go through each row, take the `hindfoot_length` value and divide it by 10. We then need to store this output in a column called, for example, `hindfoot_length_cm`.

::: {.panel-tabset group="language"}
## R

We can use the `mutate()` function to create new columns:

```{r}
mutate(surveys, hindfoot_length_cm = hindfoot_length / 10)
```

## Python

We use the square brackets to define the name of the new column, then specify what needs to go in the new column:

```{python}
surveys['hindfoot_length_cm'] = surveys['hindfoot_length'] / 10
```

:::

Although it has created the column, we can't quite see it because we have too many columns. So, let's save the new column to the data set and then select the relevant columns.

::: {.panel-tabset group="language"}
## R

First, we update our data:

```{r}
surveys <- mutate(surveys, hindfoot_length_cm = hindfoot_length / 10)
```

Next, we can select the columns.

```{r}
select(surveys, record_id, hindfoot_length, hindfoot_length_cm)
```

## Python

Our previous step already added the new column to the DataFrame, so we can directly select the relevant columns, by giving a list of the columns we're interested in:

```{python}
surveys[['record_id', 'hindfoot_length', 'hindfoot_length_cm']]

```

:::

We can see that each value in `hindfoot_length_cm` is a tenth of the value of `hindfoot_length`. This is exactly what we expected!

## Summary

::: {.callout-tip}
#### Key points

- We have several functions available that allow us to select, move, rename and create new columns
:::
