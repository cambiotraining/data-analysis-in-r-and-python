---
title: Manipulating rows
---

::: {.callout-tip}
#### Learning objectives

- 
:::


## Context
Data sets can contain large quantities of observations. Often we are only interested in part of the data at a given time. We can deal with this by manipulating rows.

## Section setup {#setup_manipulating_rows}

::: {.callout-note collapse="true"}
## Click to expand

::: {.panel-tabset group="language"}
## R

We'll continue this section with the script named `05-manipulation.R`. If needed, add the following code to the top of your script and run it.

```{r}
#| message: false
# A collection of R packages designed for data science
library(tidyverse)

surveys <- read_csv("data/surveys.csv")
```

## Python

We'll continue this section with the script named `05-manipulation.py`. If needed, add the following code to the top of your script and run it.

```{python}
# A Python data analysis and manipulation tool
import pandas as pd

# Python equivalent of `ggplot2`
from plotnine import *

surveys = pd.read_csv("data/surveys.csv")
```

:::
:::


## Manipulation of observations

### Ordering rows
We often want to order data in a certain way, for example ordering by date or in alphabetically. The example below illustrates how we would order data based on `weight`:

::: {.carousel data-caption="Ordering by weight in ascending order (click to toggle)."}

![](images/manipulation-order_main.png)
![](images/manipulation-order_weight.png)
:::

Let's illustrate this with the `surveys` data set, arranging the data based on `year`.

::: {.panel-tabset group="language"}
## R

```{r}
surveys |> 
  arrange(year)
```

If we'd want to arrange the data in *descending* order (most recent to oldest), we would employ the `desc()` helper function:

```{r}
surveys |> 
  arrange(desc(year))
```

We can read that bit of code as "take the `surveys` data set, send it to the `arrange()` function and ask it to arrange the data in descending order (using `desc()`) based on the `year` column".

We can also combine this approach with multiple variables, for example arranging data based on descending year *and* (ascending) hindfoot length:

```{r}
surveys |> 
  arrange(desc(year), hindfoot_length)
```

## Python

:::

### Finding unique values
LO: finding unique rows

### Filtering by condition
LO: filtering rows by condition

![The logic behind filtering: for each row the condition is checked (here: `hindfoot_length > 31`). If the outcome is `TRUE` then the row is returned.](images/manipulation-filter_rows.png){#fig-manipulation_filter_rows}

### Missing data revisited
LO: dealing with missing data



## Summary

::: {.callout-tip}
#### Key points

- 
:::
