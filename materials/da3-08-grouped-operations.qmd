---
title: Grouped operations
---

::: {.callout-tip}
#### Learning objectives

- Learn how to use grouped operations in data analysis.
- Be able to distinguish between grouped summaries and other types of grouped operations.
:::


## Context

We’ve done different types of operations, all on the entire data set. Sometimes there is structure within the data, such as different groups (e.g. genotypes, patient cohorts, geographical areas etc). We might then want information on a group-by-group basis.

## Section setup {#setup_grouped_operations}

::: {.callout-note collapse="true"}
## Click to expand

::: {.panel-tabset group="language"}
## R

We'll continue this section with the script named `r paste0(intToUtf8(96), sub("\\..*$", ".R", knitr::current_input()), intToUtf8(96))`. If needed, add the following code to the top of your script and run it.

```{r}
#| message: false
# A collection of R packages designed for data science
library(tidyverse)

surveys <- read_csv("data/surveys.csv")
infections <- read_csv("data/infections.csv")
```

## Python

We'll continue this section with the script named `r paste0(intToUtf8(96), sub("\\..*$", ".py", knitr::current_input()), intToUtf8(96))`. If needed, add the following code to the top of your script and run it.

```{python}
# A Python data analysis and manipulation tool
import pandas as pd

# Python equivalent of `ggplot2`
from plotnine import *

# A package to deal with arrays
import numpy as np

surveys = pd.read_csv("data/surveys.csv")
infections = pd.read_csv("data/infections.csv")
```

:::
:::

## Split-apply-combine

Conceptually, this kind of operation can be referred to as split-apply-combine, because we split the data, apply some function and then combine the outcome.

Let's illustrate this with an example. @fig-groupby_table shows a hypothetical data set, where we have temperature and rainfall measurements for different cities.

![An example of a table with groups](images/groupby_table.png){#fig-groupby_table}

Let's assume we were interested in the average temperature for each city. We would have to do the following:

1. Split the data by `city`
2. Calculate the average `temperature`
3. Combine the outcome together in a new table

This is visualised in @fig-groupby_split.

![Split-apply-combine](images/groupby_split.png){#fig-groupby_split}

## Summary operations

Let's put this into practice with our data set.

### Summarising data

A common task in data analysis is to summarise variables to get the mean and the variation around it.

For example, let’s calculate what the mean and standard deviation are for `weight`.

::: {.panel-tabset group="language"}
## R

We can achieve this task using the `summarise()` function.

```{r}
surveys |> 
  summarise(weight_mean = mean(weight, na.rm  = TRUE),
            weight_sd = sd(weight, na.rm = TRUE))
```

A couple of things to notice:

The output of `summarise` is a new table, where each column is named according to the input to `summarise()`.

Within `summarise()` we should use functions for which the output is a single value.
Also notice that, above, we used the `na.rm` option within the summary functions, so that they ignored missing values when calculating the respective statistics.

## Python

For these kind of summary statistics we can use `.agg()` - the aggregate function in `pandas`. You can apply this to a DataFrame or Series. It works on standard summary functions, listed below. 

```{python}
surveys["weight"].agg(
    weight_mean = "mean",
    weight_sd = "std"
)
```

:::

::: {.callout-tip}
## Summary functions

::: {.panel-tabset group="language"}
## R

There are many functions whose input is a vector (or a column in a table) and the output is a single number. Here are several common ones:

| R             | Example                   | Description                                 |
|---------------|---------------------------|---------------------------------------------|
| `mean`        | `mean(x, na.rm = TRUE)`   | Arithmetic mean                             |
| `median`      | `median(x, na.rm = TRUE)` | Median                                      |
| `sd`          | `sd(x, na.rm = TRUE)`     | Standard deviation                          |
| `var`         | `var(x, na.rm = TRUE)`    | Variance                                    |
| `mad`         | `mad(x, na.rm = TRUE)`    | Median absolute deviation                   |
| `min`         | `min(x, na.rm = TRUE)`    | Minimum value                               |
| `max`         | `max(x, na.rm = TRUE)`    | Maximum value                               |
| `sum`         | `sum(x, na.rm = TRUE)`    | Sum of all values                           |
| `n_distinct`  | `n_distinct(x)`           | Number of distinct (unique) values          |


All of these have the option `na.rm`, which tells the function remove missing values before doing the calculation.

## Python

| Python (`pandas`) | Example (in `.agg()`)          | Description                        |
|-------------------|--------------------------------|------------------------------------|
| `"mean"`          | `df["x"].agg("mean")`          | Arithmetic mean                    |
| `"median"`        | `df["x"].agg("median")`        | Median                             |
| `"std"`           | `df["x"].agg("std")`           | Standard deviation                 |
| `"var"`           | `df["x"].agg("var")`           | Variance                           |
| `"mad"`           | `df["x"].agg("mad")`           | Mean absolute deviation            |
| `"min"`           | `df["x"].agg("min")`           | Minimum value                      |
| `"max"`           | `df["x"].agg("max")`           | Maximum value                      |
| `"sum"`           | `df["x"].agg("sum")`           | Sum of all values                  |
| `"nunique"`       | `df["x"].agg("nunique")`       | Number of distinct (unique) values |

:::
:::

### Grouped summaries

In most cases we want to calculate summary statistics across groups of our data. 

::: {.panel-tabset group="language"}
## R

We can achieve this by combining `summarise()` with the `group_by()` function. For example, let’s modify the previous example to calculate the summary for each `sex` group:

```{r}
surveys |> 
  group_by(sex) |> 
  summarise(weight_mean = mean(weight, na.rm  = TRUE),
            weight_sd = sd(weight, na.rm = TRUE))
```

The table output now includes both the columns we defined within `summarise()` as well as the grouping columns defined within `group_by()`.

## Python

```{python}
surveys.groupby("sex")["weight"].agg(
    weight_mean = "mean",
    weight_sd = "std"
).reset_index()
```

:::

## Counting data

Counting or tallying data is an extremely useful way of getting to know your data better.

### Simple counting

::: {.panel-tabset group="language"}
## R

We can use the `count()` function from `dplyr` to count data. It always returns the number of rows it counts.

For example, this gives us the total number of observations (rows) in our data set:

```{r}
count(surveys)
```


## Python

We can use the `.shape` attribute. In `pandas`, each DataFrame has a `.shape` attribute that returns a tuple in the format `(rows, columns)`.

So, `.shape[0]` will return the number of rows, whereas `.shape[1]` returns the number of columns.

For our `surveys` DataFrame we then get the number of rows by:

```{python}
surveys.shape[0]
```

:::

We can also use that in combination with a conditional statement. For example, if we're interested in all the observations from the year `1982`.

::: {.panel-tabset group="language"}
## R

```{r}
# count the observations from the year 1982
surveys |> 
  filter(year == 1982) |> 
  count()
```


## Python

```{python}
surveys[surveys["year"] == 1982].shape[0]
```

Or, slightly easier to read, with the `.query()` function:

```{python}
surveys.query("year == 1982").shape[0]
```

:::

### Counting by group

Counting really comes into its own when we're combining this with some grouping. For example, we might be interested in the number of observations for each year.

::: {.panel-tabset group="language"}
## R

```{r}
surveys |> 
  count(year)
```

We can also easily visualise this (we can pipe straight into `ggplot()`). We use `geom_col()` to create a bar chart of the number of observations per year. We count by `sex` and use this variable to fill the colour of the bars.

```{r}
#| label: fig-counts_year_sex
#| fig-cap: "Number of observations per year, by `sex`."
surveys |> 
  count(sex, year) |> 
  ggplot(aes(x = year, y = n, fill = sex)) +
  geom_col()
```

## Python

```{python}
# Count number of rows for each year
counts = surveys.groupby("year").size().reset_index(name = "n")

# Look at the first few rows
counts.head()
```

Let's expand this example a bit, where we count by two variables: `sex` and `year`. We then also plot the results, just to illustrate how useful that can be.

```{python}
# Count observations by sex and year
counts = surveys.groupby(["sex", "year"]).size().reset_index(name = "n")
```

```{python}
#| results: hide
#| label: fig-counts_year_sex_py
#| fig-cap: "Number of observations per year, by `sex`."
p = (ggplot(counts, aes(x = "year", y = "n", fill = "sex")) +
     geom_col())

p.show()
```

:::

::: {.callout-important}
## Counting within a summary pipeline

Often we want to do counting when we're creating summaries. Let's illustrate this with an example where we take the observations from `1981` and `1982`, then calculate the mean `weight` and count the number of observations.

::: {.panel-tabset group="language"}
## R

The `count()` function can't be used within `summarise()`, but there is a special helper function called `n()`. Look at the following example, where we group by year, filter the data, create some summary statistic and also count the number of rows within each group.

```{r}
surveys |> 
  group_by(year) |>                                   # group the data
  filter(year %in% c(1981, 1982)) |>                  # filter a subset of years
  summarise(mean_weight = mean(weight, na.rm = TRUE), # calculate mean weight
            n_obs = n()) |>                           # number of rows
  ungroup()                                           # drop the grouping
```

## Python

We need to do this in two steps:

1. Filter out the relevant data
2. Calculate the summary statistics

Here we're using `(  )` around the pipeline, so we can break up the code into different lines. This aids with readability, but doesn't change how the code works!

```{python}
# Filter years 1981 and 1982
filtered = surveys[surveys["year"].isin([1981, 1982])]

# Group by year and summarise
summary = (
    filtered                               # input DataFrame
    .groupby("year")                       # group by year
    .agg(                                  # create summary statistics
        mean_weight = ("weight", "mean"),  # calculate mean weights
        n_obs = ("weight", "count")        # count of non-NaN weights
    )
    .reset_index()                         # converts index into regular column
)

print(summary)

```

:::
:::

### Counting missing data

Oh, missing data! How we've missed you. For something that isn't there, is has quite the presence. But, it is an important consideration in data analysis. We've [already seen](#missingdata-revisited) how we can remove missing data from and also explored ways to visualise them.

::: {.panel-tabset group="language"}
## R

We have seen how to use the `summary()` function to find missing values. Here we'll see (even more) ways to tally them.

We can use the `is.na()` function to great effect, within a `summarise()` pipeline. We can negate with `!is.na()` to find non-missing values. Again, using the `sum()` function then enables us to tally how many missing / non-missing values there are.

```{r}
surveys |> 
  summarise(obs_present = sum(!is.na(species_id)),    # count non-missing data
            obs_absent = sum(is.na(species_id)),      # count missing data
            n_obs = n(),                              # total number of rows
            precentage_absent = 
              (obs_absent / n_obs) * 100) |>          # percentage of missing data
  ungroup()
```

## Python

We can use the `.isna()` and `.notna()` functions to great effect. Again, we're using the `.sum()` function to tally the numbers.

```{python}
summary = pd.DataFrame([{
    "obs_present": surveys["species_id"].notna().sum(),
    "obs_absent": surveys["species_id"].isna().sum(),
    "n_obs": len(surveys),
    "percentage_absent": surveys["species_id"].isna().mean() * 100
}])

print(summary)
```


:::

## Grouped operations

### Grouped filters
Sometimes it can be really handy to filter data, by group. In our `surveys` data, for example, you might be interested to find out what the minimum `weight` value is for each `year`. We can do that as follows: 

::: {.panel-tabset group="language"}
## R

```{r}
surveys |> 
  group_by(year) |> 
  filter(weight == min(weight, na.rm = TRUE)) |> 
  ungroup()
```

You can see that this outputs the minimum value, but if there are multiple entries for each year (such as in `1978`), multiple rows returned. If we only wanted to get a single row per minimum value, per year, then we can use `slice(1)`. This slices the first row of each group:

```{r}
surveys |> 
  group_by(year) |> 
  filter(weight == min(weight, na.rm = TRUE)) |> 
  slice(1) |> 
  ungroup()
```


## Python

```{python}
# Drop rows where weight is missing
surveys_filtered = surveys.dropna(subset = ["weight"])  # get non-NA weights

# For each year, get rows with the minimum weight
min_weights_by_year = (
    surveys_filtered.loc[
        surveys_filtered.groupby("year")["weight"]      # group by year
        .transform("min") == surveys_filtered["weight"] # get min weight
    ]
)

# Look at the first few rows
min_weights_by_year.head()
```

You can see that this outputs the minimum value, but if there are multiple entries for each year (such as in `1978`), multiple rows returned. If we only wanted to get a single row per minimum value, per year, then we can do the following:

```{python}
# Retain only the first occurrence of the minimum value
first_min_per_year = surveys_filtered.loc[
    surveys_filtered.groupby("year")["weight"].idxmin()
].reset_index(drop = True)

# Look at the first few rows
first_min_per_year.head()
```

:::

### Grouped changes
Sometimes you might need to add a new variable to our table, based on different groups. Let's say we want to see how many female and male observations there are in our `surveys` data set for each `year`.

We're also interested in the percentage of female observations out of the total number of observations where `sex` was recorded.

We have the following number of female / male observations:

::: {.panel-tabset group="language"}
## R

```{r}
surveys |> 
  group_by(year) |> 
  summarise(n_obs_f = sum(sex == "F", na.rm = TRUE),
            n_obs_m = sum(sex == "M", na.rm = TRUE)) |> 
  ungroup()
```

Now, let's say we'd be interested in the percentage of female observations out of the total of observations where it was scored. We'd have to add a new column. Adding new columns is, as we've seen before, a job for `mutate()`.

```{r}
surveys |> 
  group_by(year) |> 
  summarise(n_obs_f = sum(sex == "F", na.rm = TRUE),
            n_obs_m = sum(sex == "M", na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(female_pct = n_obs_f / (n_obs_f + n_obs_m) * 100)
```

The nice thing about chaining all these commands is that we can quickly build up what we want. We could, for example, easily plot the outcome of this.

```{r}
#| label: fig-femalepct_year
#| fig-cap: "Percentage of female observations across years."
surveys |> 
  group_by(year) |> 
  summarise(n_obs_f = sum(sex == "F", na.rm = TRUE),
            n_obs_m = sum(sex == "M", na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(female_pct = n_obs_f / (n_obs_f + n_obs_m) * 100) |> 
  ggplot(aes(x = year, y = female_pct)) +
  geom_line()
```


## Python

```{python}
summary = (
    surveys
    .groupby("year")
    .agg(
        n_obs_f = ("sex", lambda x: (x == "F").sum()),
        n_obs_m = ("sex", lambda x: (x == "M").sum())
    )
    .reset_index()
)

summary.head()
```

```{python}
# Add female percentage column
summary["female_pct"] = summary["n_obs_f"] / (summary["n_obs_f"] + summary["n_obs_m"]) * 100

summary.head()
```

Now we have the table, we can easily plot it to get a better sense of any trends.

```{python}
#| results: hide
#| label: fig-femalepct_year_py
#| fig-cap: "Percentage of female observations across years."
p = (ggplot(summary, aes(x = "year", y = "female_pct")) +
    geom_line())

p.show()
```


:::

::: {.callout-warning}
## To ungroup or not ungroup (R-only)

Each time you do a grouped operation, it's good practice to remove the grouping afterwards. If you don't, then you might unintentionally be doing operations within the groups later on.

::: {.panel-tabset group="language"}
## R

Let's illustrate this with an example. We'll take out any missing values, to simplify things.

```{r}
obs_count <- surveys |> 
  drop_na() |> 
  group_by(sex, year) |> 
  summarise(n_obs = n())
```

```{r}
obs_count
```

Let's say we now wanted to transform the `n_obs` variable to a percentage of the total number of observations in the entire data set (which is `r surveys |> drop_na() |> nrow()`).

```{r}
obs_count <- obs_count |> 
  mutate(n_obs_pct = n_obs / sum(n_obs) * 100)
```

We'd expect these values in `n_obs_pct` to add up to 100%.

```{r}
sum(obs_count$n_obs_pct)
```

However, they add up to `r sum(obs_count$n_obs_pct)` instead! Why? That's because the table was still grouped by `sex` and as such, the percentages were calculated by each `sex` group. There are two of them (`F`, `M` - we filtered out the missing values), so the percentages add up to 100% *within* each `sex` group.

The way to avoid this issue is to ensure we remove any groups from our table, which we can do with `ungroup()`. Here’s the full string of commands, with the ungrouping step added:

```{r}
obs_count <- surveys |> 
  drop_na() |>                                  # remove all NAs
  group_by(sex, year) |>                        # group by sex, year
  summarise(n_obs = n()) |>                     # get number of rows
  ungroup() |>                                  # ungroup here
  mutate(n_obs_pct = n_obs / sum(n_obs) * 100)  # calculate percentage
```

We can check the percentages again and see that all is well:

```{r}
sum(obs_count$n_obs_pct)
```

## Python

In `pandas`, grouping only affects the aggregation step. Once you run `.groupby().agg()` or `.groupby().sum()`, the grouping is gone — the resulting DataFrame is no longer grouped.

So, things are easier in Python in this respect. Sometimes it's nice to be smug.
:::
:::

## Exercises

### Grouped summaries: `infections` {#sec-exr_groupedsummaries}

::::: {.callout-exercise #ex-groupedsummaries}
#### Grouped summaries

{{< level 1 >}}

For this exercise we'll be using the data from `data/infections.csv`.

Please find the following:

1. The average CRP level for each age group
2. The average CRP level for each age group by ICU admission status
3. The number of observations per hospital by quarter
4. The minimum, average and maximum number of symptoms per age group

:::: {.callout-answer collapse="true"}
We'll assume you've still got the data loaded. For all of the output we'll just display the first few rows.

#### 1. The average CRP level for each age group

If we want to do this, we need to group our data by `age_group` and then calculate the average (mean) value for each of those groups.

::: {.panel-tabset group="language"}
## R

```{r}
infections |> 
  group_by(age_group) |> 
  summarise(avg_crp_level = mean(crp_level, na.rm = TRUE)) |> 
  ungroup() |> 
  head()
```

* We use the `summarise()` function since we want a summary of the average.
* We specify `na.rm = TRUE` inside the `mean()` function, to ensure that any missing values within `crp_level` are ignored.
* We `ungroup()` at the end to remove the grouping.

## Python

```{python}
(
  infections
  .groupby("age_group", as_index = False)
  .agg(avg_crp_level = ("crp_level", "mean"))
  .head()
)
```

* We use `.groupby()` to specify the `age_group` as the grouping variable.
* We set `as_index = False` to ensure we keep it as a column, not an index.
* We use `.agg()` to calculate the `"mean"` for `"crp_level"`.

::: {.callout-note collapse="true"}
## Including missing values or not?

By default, `.groupby()` skips missing values. We have missing values in our `age_group` variable, which you might still be interested in. If you want to include them, then you need to be explicit about this:

```{python}
(
  infections
  .groupby("age_group", dropna = False, as_index = False)
  .agg(avg_crp_level = ("crp_level", "mean"))
  .head()
)
```

:::

:::

#### 2. The average CRP level for each age group by ICU admission status

Here we can just add to our previous example, but instead of grouping by only `age_group`, we also group by `icu_admission`.

::: {.panel-tabset group="language"}
## R

```{r}
infections |> 
  group_by(age_group, icu_admission) |> 
  summarise(avg_crp_level = mean(crp_level, na.rm = TRUE)) |> 
  ungroup() |> 
  head()
```


## Python

We can do this by passing a list with the column names to `.groupby()`:

```{python}
(
  infections
  .groupby(["age_group", "icu_admission"], dropna = False, as_index = False)
  .agg(avg_crp_level = ("crp_level", "mean"))
  .head()
)
```

:::

#### 3. The number of observations per hospital by quarter

To get these values, we need to tally the number of rows (each row is an observation). We're asked to do this per hospital (encoded in the `hospital` column) and for each `quarter`.

::: {.panel-tabset group="language"}
## R

```{r}
infections |> 
  count(hospital, quarter) |> 
  head()
```


## Python

```{python}
(
  infections
  .groupby(["hospital", "quarter"], as_index = False)
  .size()
  .rename(columns = {"size": "n"})
  .head()
)
```

:::

#### 4. The minimum, average and maximum number of symptoms per age group

Here we again need to aggregate/summarise our data, because we're being asked to calculate some summary statistics. We need to group our data by `age_group` and then determine the minimum (`min`), average (`mean`) and maximum (`max`).

::: {.panel-tabset group="language"}
## R

```{r}
infections |> 
  group_by(age_group) |> 
  summarise(min_symptoms = min(symptoms_count, na.rm = TRUE),
            mean_symptoms = mean(symptoms_count, na.rm = TRUE),
            max_symptoms = max(symptoms_count, na.rm = TRUE)) |> 
  ungroup() |> 
  head()
```


## Python

```{python}
(
  infections
  .groupby("age_group", dropna = False, as_index=False)
  .agg(
      min_symptoms = ("symptoms_count", "min"),
      mean_symptoms = ("symptoms_count", "mean"),
      max_symptoms = ("symptoms_count", "max")
      )
  .head()
)

```

:::
::::
:::::

### Grouped operations: `infections` {#sec-exr_groupedoperations}

::::: {.callout-exercise #ex-groupedoperations}
#### Grouped operations

{{< level 3 >}}

We'll keep using the `infections` data set.

To add a bit of fun, we'll combine the filtering with making some changes to our data and plotting these. These are the kind of operations you'll be doing a lot when exploring and analysis your data, so it's good to practise!

Have a look at the plot below and try to recreate it as accurately as possible:

```{r}
#| message: false
#| warning: false
#| echo: false
infections |> 
  filter(!is.na(hospital)) |>
  group_by(hospital) |> 
  arrange(desc(crp_level)) |> 
  slice(1:10) |> 
  summarise(mean_crp = mean(crp_level, na.rm = TRUE),
            log_crp = log(mean_crp)) |> 
  ungroup() |> 
  ggplot(aes(x = hospital, y = log_crp)) +
  geom_point() +
  geom_segment(aes(xend = hospital, y = 3.8, yend = log_crp)) +
  labs(title = "Average log values for CRP",
       subtitle = "calculated on top 10 highest values within each hospital",
       x = "",
       y = "CRP level (log values)")
```

:::{.callout-hint}

Follows this logic:

1. What data is being displayed?
2. Which variable(s) do I need to calculate?
  a. top 10 > think about arranging your data and subsetting it
  b. log values can be calculated, use search engine
3. Is any missing data present/absent?
4. What kind of plot am I looking at (search for: *lollipop plot in `ggplot`* (R) / *lollipop plot in `plotnine`* (Python))
:::

:::: {.callout-answer collapse="true"}
We'll assume you still have the data loaded.

::: {.panel-tabset group="language"}
## R

```{r}
infections |> 
  filter(!is.na(hospital)) |>
  group_by(hospital) |> 
  arrange(desc(crp_level)) |> 
  slice(1:10) |> 
  summarise(mean_crp = mean(crp_level, na.rm = TRUE),
            log_crp = log(mean_crp)) |> 
  ungroup() |> 
  ggplot(aes(x = hospital, y = log_crp)) +
  geom_point() +
  geom_segment(aes(x = hospital, xend = hospital, y = 3.8, yend = log_crp)) +
  labs(title = "Average log values for CRP",
       subtitle = "calculated on top 10 highest values within each hospital",
       x = "",
       y = "CRP level (log values)")
```

## Python

```{python}
import numpy as np

infections_result = (
    infections
    .dropna(subset=["hospital"])
    .sort_values("crp_level", ascending = False)        # arrange data
    .groupby("hospital", as_index = False)              # group data         
    .head(10)                                           # get first 10 rows
    .groupby("hospital", as_index = False)              # group again
    .agg(mean_crp = ("crp_level", "mean"))              # mean values
    .assign(log_crp = lambda d: np.log(d["mean_crp"]))  # calculate log
)
```

```{python}
#| results: hide
p = (
    ggplot(infections_result, aes(x = "hospital", y = "log_crp")) +
    geom_point() +
    geom_segment(aes(x = "hospital", xend = "hospital", y = 3.8, yend = "log_crp")) +
    labs(
        title = "Average log values for CRP",
        subtitle = "calculated on top 10 highest values within each hospital",
        x = "",
        y = "CRP level (log values)"
    )
)

p.show()
```


:::
::::
:::::

## Summary

::: {.callout-tip}
#### Key points

::: {.panel-tabset group="language"}
## R

- We can split our data into groups and apply operations to each group.
- We can then combine the outcomes in a new table.
- We use `summarise()` to calculate summary statistics (e.g. mean, median, maximum, etc).
- Using pipes with groups (e.g. `group_by() |> summarise()`) we can calculate those summaries across groups.
- We can also filter (`group_by() |>  filter()`) or create new columns (`group_by() |> mutate()`).
- It is good practice to remove grouping (with `ungroup()`) from tables after `group_by()` operations, to avoid issues with retained groupings.

## Python

- We can split our data into groups and apply operations to each group.
- We can then combine the outcomes in a new table.
- We use `.agg()` to calculate summary statistics (e.g. mean, median, maximum, etc).
- We can use `.groupby()` to group by variables in our data.
- Using grouped filters we can find values for each group within our data.
:::

:::
