---
title: "data-analysis_data_synthesis"
format: html
---

```{r}
# message: false
library(tidyverse)
# Load MASS for mvrnorm
library(MASS)
# Load scales for scaling
library(scales)
# To check structure of missing values
library(naniar)
```


```{r}
set.seed(123)  # For reproducibility

# Number of observations
n <- 1400

# Unique ID
patient_id <- sprintf("ID_%04d", seq_len(n))

# Grouping variables
hospital <- factor(sample(paste0("hospital_", 1:5), n, replace = TRUE))
quarter <- factor(sample(paste0("Q", 1:3), n, replace = TRUE))

# Categorical variables
infection_type <- factor(sample(c("none", "bacterial", "fungal", "viral"), n, replace = TRUE))
vaccination_status <- factor(sample(c("unvaccinated", "vaccinated", "unknown"), n, replace = TRUE))
age_group <- factor(sample(c("< 18", "18 - 64", "65+"), n, replace = TRUE))

# Logical variable: icu_admission, dependent on vaccination status
icu_admission <- mapply(function(vac, age) {
  # Base probability by vaccination
  base_prob <- switch(vac,
                      "unvaccinated" = 0.4,
                      "vaccinated" = 0.15,
                      "unknown" = 0.25,
                      0.25) # fallback default
  
  # Increment by age
  age_increment <- switch(age,
                          "< 18" = 0.0,
                          "18 - 64" = 0.08,
                          "65+" = 0.23,
                          0.1) # fallback default
  
  # Total probability
  prob <- min(base_prob + age_increment, 1.0)
  
  rbinom(1, 1, prob)
},
vac = as.character(vaccination_status),
age = as.character(age_group))

icu_admission <- icu_admission == 1

# Count data ensuring non-infected observations have reduced symptom counts
symptoms_count <- ifelse(
  infection_type == "none",
  rpois(n, lambda = 4),     # fewer symptoms for "none"
  rpois(n, lambda = 10)     # more symptoms otherwise
)


# Systolic pressure
systolic_pressure <- rnorm(n, mean = 125, sd = 10)
systolic_pressure <- round(systolic_pressure)

# Generate bivariate normal for body_temperature and log(CRP)
rho <- 0.45
Sigma <- matrix(c(1, rho, rho, 1), nrow = 2)
bivnorm <- mvrnorm(n, mu = c(0,0), Sigma = Sigma)

# Initialize vectors
body_temperature <- numeric(n)
log_crp <- numeric(n)

# Apply scaling and group-based mean shifts
for (v in c("vaccinated", "unknown", "unvaccinated")) {
  idx <- which(as.character(vaccination_status) == v)
  
  if (v == "vaccinated") {
    temp_shift <- 0
    crp_shift <- 0
  } else if (v == "unknown") {
    temp_shift <- 0.3
    crp_shift <- 0.2
  } else if (v == "unvaccinated") {
    temp_shift <- 0.6
    crp_shift <- 0.5
  }
  
  body_temperature[idx] <- bivnorm[idx,1]*0.7 + 37 + temp_shift
  log_crp[idx] <- bivnorm[idx,2]*0.8 + log(10) + crp_shift
}

# Rescale temperatures to realistic range
body_temperature <- rescale(body_temperature, to=c(36,41))
body_temperature <- round(body_temperature, digits = 1)

# Additional temperature increase if infected
infected <- as.character(infection_type) != "none" & !is.na(infection_type)
body_temperature[infected] <- body_temperature[infected] + 0.5

# ensure higher crp levels in infected individuals
infected <- as.character(infection_type) != "none" & !is.na(infection_type)
log_crp[infected] <- log_crp[infected] + 0.4


# Exponentiate to get skewed CRP levels and
# truncate log_crp before exponentiation to avoid outliers
log_crp <- pmin(log_crp, log(60))   # Cap log(CRP) at log(60) ~4.1
log_crp <- pmax(log_crp, log(1))    # Floor at log(1)=0

# Exponentiate
crp_level <- exp(log_crp)
# Replace values >=59 and <=60 with NA
crp_level[crp_level >= 59] <- NA
crp_level <- round(crp_level, digits = 2)


# Function to introduce 5% missingness
introduce_missingness <- function(x) {
  is_na <- rbinom(length(x), 1, 0.05) == 1
  x[is_na] <- NA
  return(x)
}

# Assemble data frame before applying missingness
df <- data.frame(
  patient_id,
  hospital,
  quarter,
  infection_type,
  vaccination_status,
  age_group,
  icu_admission,
  symptoms_count,
  systolic_pressure,
  body_temperature,
  crp_level
)

# Apply 5% missingness to all variables except ID
df[, -1] <- lapply(df[, -1], introduce_missingness)

# Quick checks
summary(df)
cor(df$body_temperature, log(df$crp_level), use = "complete.obs")

```


```{r}
df |> 
  pivot_longer(
    cols = c(symptoms_count, systolic_pressure, body_temperature, crp_level),
    names_to = "variable",
    values_to = "value"
  ) |> 
  ggplot(aes(x = value)) +
  geom_histogram(bins = 30, fill = "steelblue", color = "white") +
  facet_wrap(~ variable, scales = "free") +
  theme_minimal() +
  labs(title = "Distributions of Numeric Variables")

```


```{r}
df |> 
  ggplot(aes(x = vaccination_status, y = crp_level)) +
  geom_boxplot(fill = "lightblue") +
  theme_minimal() +
  labs(title = "CRP Levels by Vaccination Status")
```

```{r}
df |> 
  ggplot(aes(x = infection_type, y = body_temperature)) +
  geom_boxplot(fill = "lightpink") +
  theme_minimal() +
  labs(title = "Body Temperature by Infection Type")
```

```{r}
df |> 
  ggplot(aes(body_temperature, crp_level)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  theme_minimal() +
  labs(title = "Body Temperature vs CRP Level")
```

```{r}
df |> 
  count(age_group, icu_admission) |> 
  group_by(age_group) |> 
  mutate(perc = n / sum(n)) |> 
  filter(icu_admission == TRUE) |> 
  ggplot(aes(x = age_group, y = perc)) +
  geom_col(fill = "coral") +
  scale_y_continuous(labels = scales::percent) +
  theme_minimal() +
  labs(
    title = "Proportion of ICU Admissions by Age Group",
    y = "Proportion ICU Admissions"
  )
```

```{r}
ggplot(df, aes(x = symptoms_count)) +
  geom_histogram(binwidth = 1, fill = "steelblue", color = "white") +
  theme_minimal() +
  labs(title = "Distribution of Symptom Counts",
       x = "Number of Symptoms",
       y = "Count")
```

```{r}
ggplot(df, aes(infection_type, symptoms_count)) +
  geom_boxplot(fill = "lightgreen") +
  theme_minimal() +
  labs(title = "Symptoms Count by Infection Type")
```

```{r}
df %>%
  count(infection_type, icu_admission) %>%
  group_by(infection_type) %>%
  mutate(proportion = n / sum(n)) %>%
  filter(icu_admission == TRUE) %>%
  ggplot(aes(x = infection_type, y = proportion)) +
  geom_col(fill = "coral") +
  scale_y_continuous(labels = scales::percent) +
  theme_minimal() +
  labs(
    title = "Proportion of ICU Admissions by Infection Type",
    x = "Infection Type",
    y = "ICU Admission Rate"
  )

```




```{r}
gg_miss_var(df) +
  labs(title = "Missing Data per Variable")
```

```{r}
write_csv(df, file = "infections.csv")
```


# survey joining data set

```{r}
set.seed(923)  # for reproducibility

# Create 50 unique 3-digit record_ids
record_ids <- sample(100:999, 50, replace = FALSE)

# Define year levels
years <- 2021:2024

# Generate base weight per record_id (starting point for 2021)
base_weights <- sample(170:200, 50, replace = TRUE)  # higher starting values

# Expand into full dataset with 4 years per record_id
df <- tibble(
  record_id = rep(record_ids, each = 4),
  year = rep(years, times = 50)
) %>%
  group_by(record_id) %>%
  mutate(
    # Decrease weight over years with some random noise
    weight = base_weights[which(record_ids == record_id[1])] - 
             (year - 2021) * sample(3:5, 1) +  # drop 3–5 units per year
             rnorm(n(), mean = 0, sd = 2),     # small random noise
    weight = round(pmin(pmax(weight, 83), 204), 1)  # keep within bounds
  ) %>%
  ungroup()
```

```{r}
ggplot(df, aes(factor(year), weight)) +
  geom_boxplot()
```


```{r}
df |> 
    pivot_wider(names_from = "year",
              names_prefix = "yr_",
              values_from = "weight") |>
  ggplot(aes(x = yr_2021, y = yr_2022)) +
  geom_point()
```

```{r}
write_csv(df, file = "surveys_join.csv")
```

## Messy data

```{r}
set.seed(123)

n <- 100

messy_data <- data.frame(
  ID = sprintf("id%03d", 1:n),
  Age = sample(c(20:60, "twenty-five", "unknown"), n, replace = TRUE),
  Gender = sample(c("M", "F", "Female", "f", "male", NA), n, replace = TRUE),
  Score = sample(c(1:5, "five", "high", NA), n, replace = TRUE),
  `Income in GBP` = sample(c(18000:65000, NA), n, replace = TRUE),  # renamed and UK-appropriate values
  country = sample(
    c("UK", "U.K.", "United Kingdom", "United kingdom", NA),
    n,
    replace = TRUE
  ),
  'employed or not' = sample(c("yes", "no", "y", "n", "TRUE", "FALSE", NA), n, replace = TRUE),
  notes = sample(c("ok", "N/A", "none", "", "good", "error", NA), n, replace = TRUE)
)
```

| Variable        | Problem(s)                                                                 |
|-----------------|----------------------------------------------------------------------------|
| `ID`            | Clean — serves as a unique identifier                                      |
| `Age`           | Mixed data types: numeric values mixed with text (`"twenty-five"`, `"unknown"`) |
| `Gender`        | Inconsistent categorical values: `"M"`, `"F"`, `"f"`, `"male"`, `"Female"`, `NA` |
| `Score`         | Numeric-like variable contains text entries: `"five"`, `"high"`, `NA`      |
| `Income (GBP)`  | Correct numeric format, but contains `NA` (missing data)                   |
| `country`       | Inconsistent naming for UK: `"UK"`, `"U.K."`, `"United Kingdom"`, `"United kingdom"`, `NA` |
| `employed or not`    | Messy column name; inconsistent boolean values: `"yes"`, `"y"`, `"TRUE"`, `"n"`, `NA`, etc. |
| `notes`         | Free-text notes with mixed missing indicators: `"N/A"`, `""`, `"none"`, `NA` |

```{r}
write_csv(messy_data, file = "messy_data.csv")
```

```{r}
messy_data <- read_csv("messy_data.csv")
```

```{r}
library(janitor)
messy_data |> clean_names()
```

## Fish parasites

Negative binomial dataset. Also used in `stats-glm`. Generated by Dr. Vicki Hodgson.

```{r}
set.seed(123)

# Sample size
n <- 64

# Predictor variables
lake <- sample(c("A", "B", "C"), size = n, replace = TRUE)
fish_length <- rnorm(n, mean = 25, sd = 5)  # cm

# Encode lake as numeric for simulation
lake_num <- ifelse(lake == "A", 1, ifelse(lake == "B", 0, 2))

# Linear predictor (on log scale)
intercept <- 1.5
b_lake <- 0.4          # effect per step up from lake A to B to C
b_length <- 0.08       # longer fish have more parasites

linpred <- intercept + b_lake * lake_num + b_length * fish_length
mu <- exp(linpred)  # expected counts

# Simulate parasite counts using Negative Binomial
library(MASS)
theta <- 3  # dispersion parameter; lower = more overdispersion
parasite_count <- rnegbin(n, mu = mu, theta = theta)

# Assemble into dataframe
parasites <- data.frame(
  parasite_count = parasite_count,
  lake = factor(lake),
  fish_length = round(fish_length,1)
)

head(parasites)
```

```{r}
write_csv(parasites, file = "parasites.csv")
```


## Auxin

```{r}
set.seed(7231)

# Parameters for each group
params <- tribble(
  ~genotype, ~concentration, ~n,  ~mean, ~sd,
  "control", "high",         34,  31,    3.62,
  "control", "low",          43,  38,    3.67,
  "control", "none",         56,  45,    2.47,
  "mutant",  "high",         47,  35,    2.09,
  "mutant",  "low",          43,  37,    3.06,
  "mutant",  "none",         52,  40,    2.27
)

auxin_response <- params %>%
  mutate(
    plant_height = map2(n, mean, ~ rnorm(.x, .y, sd[which(n == .x & mean == .y)])),
    replicate_id = map(n, ~ seq_len(.x))
  ) %>%
  unnest(c(plant_height, replicate_id)) %>%
  mutate(plant_height = round(plant_height, 1)) |> 
  select(replicate_id, genotype, concentration, plant_height)

auxin_response

```

```{r}
write_csv(auxin_response, "auxin.csv")
```

