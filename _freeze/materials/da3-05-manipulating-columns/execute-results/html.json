{
  "hash": "277cd5e18b2fab0d145d5525a8b2b590",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Manipulating columns\n---\n\n::: {.callout-tip}\n#### Learning objectives\n\n- Learn how to select and/or rename specific columns from a data frame.\n- Be able to create new columns and modify existing ones.\n:::\n\n\n## Context\n\nIn the [tabular data](#tabular-data) section we learned to deal with, well, tabular data in the form of our `surveys` data set. This data set isn't huge, but sometimes we have many variables and we might only want to work with a subset of them. Or, we might want to create new columns based on existing data. In this section we'll cover how we can do this.\n\n## Section setup {#setup_plotting}\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe'll continue this section with the script named `da3-05-manipulating-columns.R`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A collection of R packages designed for data science\nlibrary(tidyverse)\n\nsurveys <- read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n## Python\n\nWe'll continue this section with the script named `da3-05-manipulating-columns.py`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\nsurveys = pd.read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n:::\n\n## Selecting columns\n\nLet's remind ourselves to which columns we have in our `surveys` data set. After that, we'll start making some changes.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(surveys)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"record_id\"       \"month\"           \"day\"             \"year\"           \n[5] \"plot_id\"         \"species_id\"      \"sex\"             \"hindfoot_length\"\n[9] \"weight\"         \n```\n\n\n:::\n:::\n\n \n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['record_id', 'month', 'day', 'year', 'plot_id', 'species_id', 'sex',\n       'hindfoot_length', 'weight'],\n      dtype='object')\n```\n\n\n:::\n:::\n\n\n:::\n\n### Selecting individual columns\n\nLet's say we wanted to select only the `record_id` and `year` columns. We've briefly done this when we looked at [subsetting rows and columns](#subset_rc).\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nHowever, there is an alternative way of doing this using the `dplyr` package - which is part of `tidyverse`.\n \n We can use the `select()` function:\n \n\n::: {.cell}\n\n```{.r .cell-code}\nselect(surveys, record_id, year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 2\n   record_id  year\n       <dbl> <dbl>\n 1         1  1977\n 2         2  1977\n 3         3  1977\n 4         4  1977\n 5         5  1977\n 6         6  1977\n 7         7  1977\n 8         8  1977\n 9         9  1977\n10        10  1977\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n \nUsing the base R syntax, this is equivalent to `surveys[, c(\"record_id\", \"year\")]`. Notice that with the `select()` function (and generally with `dplyr` functions) we didn’t need to quote \" the column names. This is because the first input to the function is the table name, and so everything after is assumed to be column names of that table.\n\n## Python\n\nThe way we need to specify this is by giving a list of column names `[\"record_id\", \"year\"]` and subsetting the surveys data set with this.\n\nThe way we subset is with `surveys[ ]`, so we end up with double square brackets:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys[[\"record_id\", \"year\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       record_id  year\n0              1  1977\n1              2  1977\n2              3  1977\n3              4  1977\n4              5  1977\n...          ...   ...\n35544      35545  2002\n35545      35546  2002\n35546      35547  2002\n35547      35548  2002\n35548      35549  2002\n\n[35549 rows x 2 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n### Selecting with helper functions\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nThe `select()` function becomes particularly useful when we combine it with other helper functions. For example, this code will select all the columns where the column name contains the string (text) `\"_id\"`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# returns all columns where the column name contains the text \"_id\"\nselect(surveys, contains(\"_id\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 3\n   record_id plot_id species_id\n       <dbl>   <dbl> <chr>     \n 1         1       2 NL        \n 2         2       3 NL        \n 3         3       2 DM        \n 4         4       7 DM        \n 5         5       3 DM        \n 6         6       1 PF        \n 7         7       2 PE        \n 8         8       1 DM        \n 9         9       1 DM        \n10        10       6 PF        \n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\nAnother thing we often want to do is select columns by their data type. For example, if we wanted to select all numerical columns we could do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(surveys, where(is.numeric))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 7\n   record_id month   day  year plot_id hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl>           <dbl>  <dbl>\n 1         1     7    16  1977       2              32     NA\n 2         2     7    16  1977       3              33     NA\n 3         3     7    16  1977       2              37     NA\n 4         4     7    16  1977       7              36     NA\n 5         5     7    16  1977       3              35     NA\n 6         6     7    16  1977       1              14     NA\n 7         7     7    16  1977       2              NA     NA\n 8         8     7    16  1977       1              37     NA\n 9         9     7    16  1977       1              34     NA\n10        10     7    16  1977       6              20     NA\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\nThe subsetting becomes a bit tedious when we're looking for patterns in the column names. Here, we can instead use the `.filter` attribute of the surveys data set, and look for a string (text) where the column name contains `\"_id\"`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys.filter(like = \"_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       record_id  plot_id species_id\n0              1        2         NL\n1              2        3         NL\n2              3        2         DM\n3              4        7         DM\n4              5        3         DM\n...          ...      ...        ...\n35544      35545       15         AH\n35545      35546       15         AH\n35546      35547       10         RM\n35547      35548        7         DO\n35548      35549        5        NaN\n\n[35549 rows x 3 columns]\n```\n\n\n:::\n:::\n\n\nAnother thing we often want to do is select columns by their data type. For example, if we wanted to select all numerical columns we could do this:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys.select_dtypes(include = [\"number\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       record_id  month  day  year  plot_id  hindfoot_length  weight\n0              1      7   16  1977        2             32.0     NaN\n1              2      7   16  1977        3             33.0     NaN\n2              3      7   16  1977        2             37.0     NaN\n3              4      7   16  1977        7             36.0     NaN\n4              5      7   16  1977        3             35.0     NaN\n...          ...    ...  ...   ...      ...              ...     ...\n35544      35545     12   31  2002       15              NaN     NaN\n35545      35546     12   31  2002       15              NaN     NaN\n35546      35547     12   31  2002       10             15.0    14.0\n35547      35548     12   31  2002        7             36.0    51.0\n35548      35549     12   31  2002        5              NaN     NaN\n\n[35549 rows x 7 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n### Selecting a range of columns\n\nLet's say we're interested in all the columns from `record_id` to `year`.\n\n::: {.panel-tabset group=\"language\"}\n## R\nIn that case, we can use the `:` symbol.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# returns all columns between and including record_id and year\nselect(surveys, record_id:year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 4\n   record_id month   day  year\n       <dbl> <dbl> <dbl> <dbl>\n 1         1     7    16  1977\n 2         2     7    16  1977\n 3         3     7    16  1977\n 4         4     7    16  1977\n 5         5     7    16  1977\n 6         6     7    16  1977\n 7         7     7    16  1977\n 8         8     7    16  1977\n 9         9     7    16  1977\n10        10     7    16  1977\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\nWe can also combine this with the previous method:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# returns all columns between and including record_id and year\n# and all columns where the column name contains the text \"_id\"\nselect(surveys, record_id:year, contains(\"_id\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 6\n   record_id month   day  year plot_id species_id\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>     \n 1         1     7    16  1977       2 NL        \n 2         2     7    16  1977       3 NL        \n 3         3     7    16  1977       2 DM        \n 4         4     7    16  1977       7 DM        \n 5         5     7    16  1977       3 DM        \n 6         6     7    16  1977       1 PF        \n 7         7     7    16  1977       2 PE        \n 8         8     7    16  1977       1 DM        \n 9         9     7    16  1977       1 DM        \n10        10     7    16  1977       6 PF        \n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\nIn that case, we can use the `:` symbol, in combination with the `.loc` indexer.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys.loc[:, \"record_id\":\"year\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       record_id  month  day  year\n0              1      7   16  1977\n1              2      7   16  1977\n2              3      7   16  1977\n3              4      7   16  1977\n4              5      7   16  1977\n...          ...    ...  ...   ...\n35544      35545     12   31  2002\n35545      35546     12   31  2002\n35546      35547     12   31  2002\n35547      35548     12   31  2002\n35548      35549     12   31  2002\n\n[35549 rows x 4 columns]\n```\n\n\n:::\n:::\n\n\n\n:::\n\n### Unselecting columns\n\nLastly, we can also **unselect columns**. This can be useful when you want most columns, apart from some.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nTo do this, we use the `-` symbol before the column name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# returns all columns apart from record_id\nselect(surveys, -record_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 8\n   month   day  year plot_id species_id sex   hindfoot_length weight\n   <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1     7    16  1977       2 NL         M                  32     NA\n 2     7    16  1977       3 NL         M                  33     NA\n 3     7    16  1977       2 DM         F                  37     NA\n 4     7    16  1977       7 DM         M                  36     NA\n 5     7    16  1977       3 DM         M                  35     NA\n 6     7    16  1977       1 PF         M                  14     NA\n 7     7    16  1977       2 PE         F                  NA     NA\n 8     7    16  1977       1 DM         M                  37     NA\n 9     7    16  1977       1 DM         F                  34     NA\n10     7    16  1977       6 PF         F                  20     NA\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\nTo do this, we use the `.drop` attribute. Here, we only unselect one column, but we can easily extend this by providing a list of columns do the `column =` argument.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys.drop(columns = \"record_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       month  day  year  plot_id species_id  sex  hindfoot_length  weight\n0          7   16  1977        2         NL    M             32.0     NaN\n1          7   16  1977        3         NL    M             33.0     NaN\n2          7   16  1977        2         DM    F             37.0     NaN\n3          7   16  1977        7         DM    M             36.0     NaN\n4          7   16  1977        3         DM    M             35.0     NaN\n...      ...  ...   ...      ...        ...  ...              ...     ...\n35544     12   31  2002       15         AH  NaN              NaN     NaN\n35545     12   31  2002       15         AH  NaN              NaN     NaN\n35546     12   31  2002       10         RM    F             15.0    14.0\n35547     12   31  2002        7         DO    M             36.0    51.0\n35548     12   31  2002        5        NaN  NaN              NaN     NaN\n\n[35549 rows x 8 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n## Renaming and reshuffling columns\n\n### Renaming columns\n\nFor example, we might want to change the `weight` column name to `weight_g`, to reflect that the values are in grams.\n\n::: {.panel-tabset group=\"language\"}\n## R\nWe can use the `rename()` function to change a column name. We do this as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrename(surveys, weight_g = weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 9\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight_g\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>    <dbl>\n 1         1     7    16  1977       2 NL         M                  32       NA\n 2         2     7    16  1977       3 NL         M                  33       NA\n 3         3     7    16  1977       2 DM         F                  37       NA\n 4         4     7    16  1977       7 DM         M                  36       NA\n 5         5     7    16  1977       3 DM         M                  35       NA\n 6         6     7    16  1977       1 PF         M                  14       NA\n 7         7     7    16  1977       2 PE         F                  NA       NA\n 8         8     7    16  1977       1 DM         M                  37       NA\n 9         9     7    16  1977       1 DM         F                  34       NA\n10        10     7    16  1977       6 PF         F                  20       NA\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\nWe can use the `.rename()` attribute of the `surveys` `pandas` DataFrame:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys.rename(columns = {'weight': 'weight_g'})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       record_id  month  day  year  ...  species_id  sex hindfoot_length  weight_g\n0              1      7   16  1977  ...          NL    M            32.0       NaN\n1              2      7   16  1977  ...          NL    M            33.0       NaN\n2              3      7   16  1977  ...          DM    F            37.0       NaN\n3              4      7   16  1977  ...          DM    M            36.0       NaN\n4              5      7   16  1977  ...          DM    M            35.0       NaN\n...          ...    ...  ...   ...  ...         ...  ...             ...       ...\n35544      35545     12   31  2002  ...          AH  NaN             NaN       NaN\n35545      35546     12   31  2002  ...          AH  NaN             NaN       NaN\n35546      35547     12   31  2002  ...          RM    F            15.0      14.0\n35547      35548     12   31  2002  ...          DO    M            36.0      51.0\n35548      35549     12   31  2002  ...         NaN  NaN             NaN       NaN\n\n[35549 rows x 9 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n### Reshuffling columns\n\nIt might be that you want to reorder/reshuffle a column. Here, the `year` column is our fourth variable. Let's say we'd want to  move this to the second position (after `record_id`).\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can use the `relocate()` function to do this. The function has several arguments, starting with `.`, such as `.before =` or `.after =`. These allow you to specify where you want to reinsert the column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelocate(surveys, year, .after = record_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 9\n   record_id  year month   day plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1         1  1977     7    16       2 NL         M                  32     NA\n 2         2  1977     7    16       3 NL         M                  33     NA\n 3         3  1977     7    16       2 DM         F                  37     NA\n 4         4  1977     7    16       7 DM         M                  36     NA\n 5         5  1977     7    16       3 DM         M                  35     NA\n 6         6  1977     7    16       1 PF         M                  14     NA\n 7         7  1977     7    16       2 PE         F                  NA     NA\n 8         8  1977     7    16       1 DM         M                  37     NA\n 9         9  1977     7    16       1 DM         F                  34     NA\n10        10  1977     7    16       6 PF         F                  20     NA\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n\n## Python\n\nUnlike in R, there isn't a very clear, straightforward way of reinserting columns in a `pandas` DataFrame. We could show you convoluted ways of doing so, but at this point that's just confusing. So, we'll leave you with a [link to a Stackoverflow solution](https://stackoverflow.com/questions/13148429/how-to-change-the-order-of-dataframe-columns).\n:::\n\n## Creating new columns\n\nSometimes we need to create new columns. For example, we might have a variable that is not in the unit of measurement we need (e.g. in millimeters, instead of centimeters).\n\nConceptually, that looks something like this:\n\n![Creating a new column using data from an existing one.](images/manipulation-new_column.png){#fig-manipulation_new}\n\nLet's illustrate this with an example on our `surveys` data set. Let's say we wanted to get `hindfoot_length` in centimeters, instead of millimeters. We'd have to go through each row, take the `hindfoot_length` value and divide it by 10. We then need to store this output in a column called, for example, `hindfoot_length_cm`.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can use the `mutate()` function to create new columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(surveys, hindfoot_length_cm = hindfoot_length / 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 10\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2         2     7    16  1977       3 NL         M                  33     NA\n 3         3     7    16  1977       2 DM         F                  37     NA\n 4         4     7    16  1977       7 DM         M                  36     NA\n 5         5     7    16  1977       3 DM         M                  35     NA\n 6         6     7    16  1977       1 PF         M                  14     NA\n 7         7     7    16  1977       2 PE         F                  NA     NA\n 8         8     7    16  1977       1 DM         M                  37     NA\n 9         9     7    16  1977       1 DM         F                  34     NA\n10        10     7    16  1977       6 PF         F                  20     NA\n# ℹ 35,539 more rows\n# ℹ 1 more variable: hindfoot_length_cm <dbl>\n```\n\n\n:::\n:::\n\n\n## Python\n\nWe use the square brackets to define the name of the new column, then specify what needs to go in the new column:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys['hindfoot_length_cm'] = surveys['hindfoot_length'] / 10\n```\n:::\n\n\n:::\n\nAlthough it has created the column, we can't quite see it because we have too many columns. So, let's save the new column to the data set and then select the relevant columns.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nFirst, we update our data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys <- mutate(surveys, hindfoot_length_cm = hindfoot_length / 10)\n```\n:::\n\n\nNext, we can select the columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(surveys, record_id, hindfoot_length, hindfoot_length_cm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 3\n   record_id hindfoot_length hindfoot_length_cm\n       <dbl>           <dbl>              <dbl>\n 1         1              32                3.2\n 2         2              33                3.3\n 3         3              37                3.7\n 4         4              36                3.6\n 5         5              35                3.5\n 6         6              14                1.4\n 7         7              NA               NA  \n 8         8              37                3.7\n 9         9              34                3.4\n10        10              20                2  \n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\nOur previous step already added the new column to the DataFrame, so we can directly select the relevant columns, by giving a list of the columns we're interested in:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys[['record_id', 'hindfoot_length', 'hindfoot_length_cm']]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       record_id  hindfoot_length  hindfoot_length_cm\n0              1             32.0                 3.2\n1              2             33.0                 3.3\n2              3             37.0                 3.7\n3              4             36.0                 3.6\n4              5             35.0                 3.5\n...          ...              ...                 ...\n35544      35545              NaN                 NaN\n35545      35546              NaN                 NaN\n35546      35547             15.0                 1.5\n35547      35548             36.0                 3.6\n35548      35549              NaN                 NaN\n\n[35549 rows x 3 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\nWe can see that each value in `hindfoot_length_cm` is a tenth of the value of `hindfoot_length`. This is exactly what we expected!\n\n## Exercises\n\n### Selecting columns: `infections` {#sec-exr_selectcols}\n\n::: {.callout-exercise #ex-selectcols}\n#### Selecting columns\n\n{{< level 2 >}}\n\nFor this exercise we'll be using a new data set, called `infections`. These are synthetic data (see the [script](https://github.com/cambiotraining/data-analysis-in-r-and-python/blob/main/materials/no_render/data-analysis_data_synthesis.qmd) if you would like to know more).\n\nPlease do the following:\n\n1. Read in the data\n2. Get to grips with the structure of the data\n3. Select the `patient_id`, `systolic_pressure` and `body_temperature` columns\n4. Select all numerical columns\n5. Unselect all logical columns\n\n::: {.callout-answer collapse=\"true\"}\n#### 1. Read in the data\n\nFirst we load the data, and have a glimpse of it.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfections <- read_csv(\"data/infections.csv\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(infections)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  patient_id hospital   quarter infection_type vaccination_status age_group\n  <chr>      <chr>      <chr>   <chr>          <chr>              <chr>    \n1 ID_0001    hospital_3 Q2      none           <NA>               65+      \n2 ID_0002    hospital_3 Q2      viral          <NA>               18 - 64  \n3 ID_0003    hospital_2 Q2      none           unknown            65+      \n4 ID_0004    hospital_2 Q3      fungal         unvaccinated       < 18     \n5 ID_0005    hospital_3 Q2      fungal         vaccinated         65+      \n6 ID_0006    hospital_5 Q3      none           vaccinated         65+      \n# ℹ 5 more variables: icu_admission <lgl>, symptoms_count <dbl>,\n#   systolic_pressure <dbl>, body_temperature <dbl>, crp_level <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections = pd.read_csv(\"data/infections.csv\")\n\ninfections.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  patient_id    hospital  ... body_temperature crp_level\n0    ID_0001  hospital_3  ...             37.8     12.05\n1    ID_0002  hospital_3  ...             39.1      8.11\n2    ID_0003  hospital_2  ...             38.5      5.24\n3    ID_0004  hospital_2  ...             39.4     41.73\n4    ID_0005  hospital_3  ...             36.9     10.51\n\n[5 rows x 11 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n#### 2. Get to grips with the structure of the data\n\nBefore delving into any analysis, it's always good to have a good look at your data, so you know what you're dealing with. We can look at the overall structure (focussing on the column types & checking if they make sense), at number of columns/observations, column names, summary statistics etc.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(infections) # overall structure\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [1,400 × 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ patient_id        : chr [1:1400] \"ID_0001\" \"ID_0002\" \"ID_0003\" \"ID_0004\" ...\n $ hospital          : chr [1:1400] \"hospital_3\" \"hospital_3\" \"hospital_2\" \"hospital_2\" ...\n $ quarter           : chr [1:1400] \"Q2\" \"Q2\" \"Q2\" \"Q3\" ...\n $ infection_type    : chr [1:1400] \"none\" \"viral\" \"none\" \"fungal\" ...\n $ vaccination_status: chr [1:1400] NA NA \"unknown\" \"unvaccinated\" ...\n $ age_group         : chr [1:1400] \"65+\" \"18 - 64\" \"65+\" \"< 18\" ...\n $ icu_admission     : logi [1:1400] FALSE FALSE TRUE TRUE TRUE FALSE ...\n $ symptoms_count    : num [1:1400] 1 6 3 7 7 5 10 12 13 7 ...\n $ systolic_pressure : num [1:1400] 117 115 120 129 114 124 133 120 124 127 ...\n $ body_temperature  : num [1:1400] 37.8 39.1 38.5 39.4 36.9 36.8 39.4 39.3 39.6 39.1 ...\n $ crp_level         : num [1:1400] 12.05 8.11 5.24 41.73 10.51 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   patient_id = col_character(),\n  ..   hospital = col_character(),\n  ..   quarter = col_character(),\n  ..   infection_type = col_character(),\n  ..   vaccination_status = col_character(),\n  ..   age_group = col_character(),\n  ..   icu_admission = col_logical(),\n  ..   symptoms_count = col_double(),\n  ..   systolic_pressure = col_double(),\n  ..   body_temperature = col_double(),\n  ..   crp_level = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(infections) # row number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1400\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(infections) # column number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(infections) # column names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"patient_id\"         \"hospital\"           \"quarter\"           \n [4] \"infection_type\"     \"vaccination_status\" \"age_group\"         \n [7] \"icu_admission\"      \"symptoms_count\"     \"systolic_pressure\" \n[10] \"body_temperature\"   \"crp_level\"         \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(infections) # summary statistics\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  patient_id          hospital           quarter          infection_type    \n Length:1400        Length:1400        Length:1400        Length:1400       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n vaccination_status  age_group         icu_admission   symptoms_count  \n Length:1400        Length:1400        Mode :logical   Min.   : 0.000  \n Class :character   Class :character   FALSE:814       1st Qu.: 6.000  \n Mode  :character   Mode  :character   TRUE :513       Median : 9.000  \n                                       NA's :73        Mean   : 8.549  \n                                                       3rd Qu.:11.000  \n                                                       Max.   :21.000  \n                                                       NA's   :67      \n systolic_pressure body_temperature   crp_level     \n Min.   : 87.0     Min.   :36.30    Min.   : 1.000  \n 1st Qu.:118.0     1st Qu.:38.20    1st Qu.: 9.117  \n Median :125.0     Median :38.80    Median :16.215  \n Mean   :125.1     Mean   :38.75    Mean   :19.465  \n 3rd Qu.:132.0     3rd Qu.:39.40    3rd Qu.:26.433  \n Max.   :163.0     Max.   :41.50    Max.   :58.860  \n NA's   :74        NA's   :67       NA's   :156     \n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.info() # overall structure\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1400 entries, 0 to 1399\nData columns (total 11 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   patient_id          1400 non-null   object \n 1   hospital            1332 non-null   object \n 2   quarter             1325 non-null   object \n 3   infection_type      1326 non-null   object \n 4   vaccination_status  1325 non-null   object \n 5   age_group           1329 non-null   object \n 6   icu_admission       1327 non-null   object \n 7   symptoms_count      1333 non-null   float64\n 8   systolic_pressure   1326 non-null   float64\n 9   body_temperature    1333 non-null   float64\n 10  crp_level           1244 non-null   float64\ndtypes: float64(4), object(7)\nmemory usage: 120.4+ KB\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.shape[0] # row number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1400\n```\n\n\n:::\n\n```{.python .cell-code}\ninfections.shape[1] # column number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n11\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.columns # column names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['patient_id', 'hospital', 'quarter', 'infection_type',\n       'vaccination_status', 'age_group', 'icu_admission', 'symptoms_count',\n       'systolic_pressure', 'body_temperature', 'crp_level'],\n      dtype='object')\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.describe() # summary statistics\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       symptoms_count  systolic_pressure  body_temperature    crp_level\ncount     1333.000000        1326.000000       1333.000000  1244.000000\nmean         8.549137         125.070136         38.751988    19.464751\nstd          3.825004          10.346761          0.883689    13.083907\nmin          0.000000          87.000000         36.300000     1.000000\n25%          6.000000         118.000000         38.200000     9.117500\n50%          9.000000         125.000000         38.800000    16.215000\n75%         11.000000         132.000000         39.400000    26.432500\nmax         21.000000         163.000000         41.500000    58.860000\n```\n\n\n:::\n:::\n\n\n:::\n\nNow that we have a much better view of what our data looks like, let's play around with selecting and manipulating columns.\n\n#### 3. Select the `patient_id`, `systolic_pressure` and `body_temperature` columns\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(infections, patient_id, systolic_pressure, body_temperature)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,400 × 3\n   patient_id systolic_pressure body_temperature\n   <chr>                  <dbl>            <dbl>\n 1 ID_0001                  117             37.8\n 2 ID_0002                  115             39.1\n 3 ID_0003                  120             38.5\n 4 ID_0004                  129             39.4\n 5 ID_0005                  114             36.9\n 6 ID_0006                  124             36.8\n 7 ID_0007                  133             39.4\n 8 ID_0008                  120             39.3\n 9 ID_0009                  124             39.6\n10 ID_0010                  127             39.1\n# ℹ 1,390 more rows\n```\n\n\n:::\n:::\n\n\n\n## Python\n\nWe use the `[[ ]]` notations, because we are subsetting the DataFrame (`infections[ ]`) and we are subsetting it by using a list of column names `[\"patient_id\", \"systolic_pressure\", \"body_temperature\"]`:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections[[\"patient_id\", \"systolic_pressure\", \"body_temperature\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     patient_id  systolic_pressure  body_temperature\n0       ID_0001              117.0              37.8\n1       ID_0002              115.0              39.1\n2       ID_0003              120.0              38.5\n3       ID_0004              129.0              39.4\n4       ID_0005              114.0              36.9\n...         ...                ...               ...\n1395    ID_1396              118.0              39.0\n1396    ID_1397              117.0              38.8\n1397    ID_1398              137.0               NaN\n1398    ID_1399              135.0              38.8\n1399    ID_1400              129.0              37.0\n\n[1400 rows x 3 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n#### 4. Select all numerical columns\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(infections, where(is.numeric))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,400 × 4\n   symptoms_count systolic_pressure body_temperature crp_level\n            <dbl>             <dbl>            <dbl>     <dbl>\n 1              1               117             37.8     12.0 \n 2              6               115             39.1      8.11\n 3              3               120             38.5      5.24\n 4              7               129             39.4     41.7 \n 5              7               114             36.9     10.5 \n 6              5               124             36.8      6.57\n 7             10               133             39.4     53.1 \n 8             12               120             39.3     NA   \n 9             13               124             39.6     50.3 \n10              7               127             39.1     13.0 \n# ℹ 1,390 more rows\n```\n\n\n:::\n:::\n\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.select_dtypes(include = [\"number\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      symptoms_count  systolic_pressure  body_temperature  crp_level\n0                1.0              117.0              37.8      12.05\n1                6.0              115.0              39.1       8.11\n2                3.0              120.0              38.5       5.24\n3                7.0              129.0              39.4      41.73\n4                7.0              114.0              36.9      10.51\n...              ...                ...               ...        ...\n1395             8.0              118.0              39.0      10.14\n1396             3.0              117.0              38.8      34.42\n1397             3.0              137.0               NaN      17.30\n1398             5.0              135.0              38.8      18.41\n1399             3.0              129.0              37.0       7.69\n\n[1400 rows x 4 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n#### 5. Unselect all logical columns\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can do something similar as with the numerical column, just specifying the `logical` type and then negating it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(infections, -where(is.logical))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,400 × 10\n   patient_id hospital   quarter infection_type vaccination_status age_group\n   <chr>      <chr>      <chr>   <chr>          <chr>              <chr>    \n 1 ID_0001    hospital_3 Q2      none           <NA>               65+      \n 2 ID_0002    hospital_3 Q2      viral          <NA>               18 - 64  \n 3 ID_0003    hospital_2 Q2      none           unknown            65+      \n 4 ID_0004    hospital_2 Q3      fungal         unvaccinated       < 18     \n 5 ID_0005    hospital_3 Q2      fungal         vaccinated         65+      \n 6 ID_0006    hospital_5 Q3      none           vaccinated         65+      \n 7 ID_0007    hospital_4 Q1      fungal         unvaccinated       18 - 64  \n 8 ID_0008    hospital_1 Q1      <NA>           unvaccinated       18 - 64  \n 9 ID_0009    hospital_2 Q1      viral          <NA>               65+      \n10 ID_0010    hospital_3 Q3      none           unvaccinated       <NA>     \n# ℹ 1,390 more rows\n# ℹ 4 more variables: symptoms_count <dbl>, systolic_pressure <dbl>,\n#   body_temperature <dbl>, crp_level <dbl>\n```\n\n\n:::\n:::\n\n\n## Python\n\nWe can do something similar as with the numerical column, just specifying the `bool` type and now excluding it:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.select_dtypes(exclude = [\"bool\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     patient_id    hospital  ... body_temperature crp_level\n0       ID_0001  hospital_3  ...             37.8     12.05\n1       ID_0002  hospital_3  ...             39.1      8.11\n2       ID_0003  hospital_2  ...             38.5      5.24\n3       ID_0004  hospital_2  ...             39.4     41.73\n4       ID_0005  hospital_3  ...             36.9     10.51\n...         ...         ...  ...              ...       ...\n1395    ID_1396  hospital_3  ...             39.0     10.14\n1396    ID_1397  hospital_3  ...             38.8     34.42\n1397    ID_1398  hospital_1  ...              NaN     17.30\n1398    ID_1399  hospital_2  ...             38.8     18.41\n1399    ID_1400  hospital_2  ...             37.0      7.69\n\n[1400 rows x 11 columns]\n```\n\n\n:::\n:::\n\n\n:::\n:::\n:::\n\n### Creating columns: `body_temperature_f` {#sec-exr_bodytempf}\n\n::: {.callout-exercise #ex-bodytempf}\n#### Creating columns\n\n{{< level 2 >}}\n\nFor this exercise we'll again use the data from `data/infections.csv`. We'll assume you've still have it read in. Please try the following:\n\nCreate a `body_temperature_f` that contains the body temperature measurements in Fahrenheit.\n\n\n::: {.callout-hint collapse=\"true\"}\nTo convert Celsius to Fahrenheit, do the following:\n\n$$\nF = \\left( C \\times \\frac{9}{5} \\right) + 32\n$$\n\n:::\n\n::: {.callout-answer collapse=\"true\"}\n\nWe need to update the existing table, so we view the result.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfections <- mutate(infections, body_temperature_f = body_temperature * (9/5) + 32)\n```\n:::\n\n\nLet's check if the result is what we expected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(infections, body_temperature, body_temperature_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,400 × 2\n   body_temperature body_temperature_f\n              <dbl>              <dbl>\n 1             37.8              100. \n 2             39.1              102. \n 3             38.5              101. \n 4             39.4              103. \n 5             36.9               98.4\n 6             36.8               98.2\n 7             39.4              103. \n 8             39.3              103. \n 9             39.6              103. \n10             39.1              102. \n# ℹ 1,390 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections[\"body_temperature_f\"] = infections[\"body_temperature\"] * (9/5) + 32\n```\n:::\n\n\nLet's check if the result is what we expected.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections[[\"body_temperature\", \"body_temperature_f\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      body_temperature  body_temperature_f\n0                 37.8              100.04\n1                 39.1              102.38\n2                 38.5              101.30\n3                 39.4              102.92\n4                 36.9               98.42\n...                ...                 ...\n1395              39.0              102.20\n1396              38.8              101.84\n1397               NaN                 NaN\n1398              38.8              101.84\n1399              37.0               98.60\n\n[1400 rows x 2 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n:::\n:::\n\n### Creating and plotting columns {#sec-exr_createplotcols}\n\n::: {.callout-exercise #ex-createplotcols}\n#### Creating and plotting columns\n\n{{< level 2 >}}\n\nWe'll again use the `infections` data set, but this time we want you to fix the code below to recreate the image. To do so, please change all the `<FIXME>` entries to the correct code.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create the column for the y-axis values\ninfections <- mutate(infections, systolic_pressure_kpa = <FIXME> / 7.5006)\n\n# plot the data\nggplot(infections, aes(x = <FIXME>, y = systolic_pressure_kpa)) +\n  geom_<FIXME>(aes(fill = <FIXME>))\n```\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](da3-05-manipulating-columns_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# create the column for the y-axis values\ninfections[\"systolic_pressure_kpa\"] = infections[\"<FIXME>\"] / 7.5006\n\n# plot the data\np = (ggplot(infections, aes(x = \"<FIXME>\", y = \"systolic_pressure_kpa\")) +\n  geom_<FIXME>(aes(fill = \"<FIXME>\")))\n  \np.show()\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](da3-05-manipulating-columns_files/figure-html/unnamed-chunk-48-1.png){width=614}\n:::\n:::\n\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## mmHg to kPa\n$$\n1\\ \\text{kPa} \\approx 7.5006\\ \\text{mmHg}\n$$\n\n:::\n\n::: {.callout-answer collapse=\"true\"}\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create the column for the y-axis values\ninfections <- mutate(infections,\n                     systolic_pressure_kpa = systolic_pressure / 7.5006)\n\n# plot the data\nggplot(infections, aes(x = age_group, y = systolic_pressure_kpa)) +\n  geom_boxplot(aes(fill = icu_admission))\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# create the column for the y-axis values\ninfections[\"systolic_pressure_kpa\"] = infections[\"systolic_pressure\"] / 7.5006\n\n# plot the data\np = (ggplot(infections, aes(x = \"age_group\", y = \"systolic_pressure_kpa\")) +\n  geom_boxplot(aes(fill = \"icu_admission\")))\n  \np.show()\n```\n:::\n\n\n:::\n\n:::\n:::\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- We have several functions available that allow us to select, move, rename and create new columns\n:::\n",
    "supporting": [
      "da3-05-manipulating-columns_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}