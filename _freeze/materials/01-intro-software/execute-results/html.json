{
  "hash": "f9b792550434707c282e67efc7b50f7d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Intro to software\"\n---\n\n::: {.callout-tip}\n#### Learning objectives\n\n- Get familiar with the programming language\n- Get to know the interface software\n:::\n\n\n## Context\n\n### What is R? \n\nR is a statistical programming language.  It is very popular in the data science field, including Bioinformatics.  The term \"`R`\" is used to refer to both the programming language and the software that interprets the scripts written using it.\n\n\n### Why learn R?\n\n**R does not involve lots of pointing and clicking**\n\nThe learning curve might be steeper than with other software, but with R, the\nresults of your analysis do not rely on remembering a succession of pointing\nand clicking, but instead on a series of written commands, and that's a good\nthing! So, if you want to redo your analysis because you collected more data,\nyou don't have to remember which button you clicked in which order to obtain\nyour results; you just have to run your script again.\n\nWorking with scripts makes the steps you used in your analysis clear, and the\ncode you write can be inspected by someone else who can give you feedback and\nspot mistakes.\n\nWorking with scripts forces you to have a deeper understanding of what you are\ndoing, and facilitates your learning and comprehension of the methods you use.\n\n**R code is great for reproducibility**\n\nReproducibility is when someone else (including your future self) can obtain the\nsame results from the same data set when using the same analysis.\n\nR integrates with other tools to generate reports from your code. If you\ncollect more data, or fix a mistake in your dataset, the figures and the\nstatistical tests in your manuscript are updated automatically after running the code again.\n\nAn increasing number of journals and funding agencies expect analyses to be\nreproducible, so knowing R will give you an edge with these requirements.\n\n\n**R is interdisciplinary and extendable**\n\nWith 10,000+ packages that can be installed to extend its capabilities, R\nprovides a framework that allows you to combine statistical approaches from many\nscientific disciplines to best suit the analytical framework you need to analyze your\ndata. For instance, R has packages for image analysis, GIS, time series, population\ngenetics, and a lot more.\n\n**R works on data of different sizes**\n\nThe skills you learn with R scale easily with the size of your dataset. Whether\nyour dataset has hundreds or millions of lines, it won't make much difference to\nyou.\n\nR is designed for data analysis. It comes with special data structures and data\ntypes that make handling of missing data and statistical factors convenient.\n\nR can connect to spreadsheets, databases, and many other data formats, on your\ncomputer or on the web.\n\n**R produces high-quality graphics**\n\nThe plotting functionality in R is endless, and allow you to adjust any\naspect of your graph to convey most effectively the message from your data.\n\n**R has great support**\n\nThousands of people use R daily. Many of them are willing to help you through\nmailing lists and websites such as [Stack Overflow](https://stackoverflow.com/), or on the [Posit community](https://forum.posit.co/).\n\n**R is free, open-source and cross-platform**\n\nAnyone can inspect the source code to see how R works. Because of this\ntransparency, there is less chance for mistakes, and if you (or someone else)\nfind some, you can report and fix bugs.\n\n### What is RStudio?\n\n[RStudio](https://posit.co) is currently a very popular Integrated Development Environment (IDE) for working with R.  An IDE is an application used by software developers that facilitates programming by offering source code editing, building and debugging tools all integrated into one application.  To function correctly, RStudio needs R and therefore both need to be installed on your computer.\n\nThe RStudio Desktop open-source product is free under the\n[Affero General Public License (AGPL) v3](https://www.gnu.org/licenses/agpl-3.0.en.html).  [Other versions of RStudio](https://posit.co/download/rstudio-desktop/) are also available.\n\nWe will use RStudio IDE to write code, navigate the files on our computer,\ninspect the variables we are going to create, and visualize the plots we will\ngenerate. RStudio can also be used for other things (*e.g.,* version control,\ndeveloping packages, writing Shiny apps) that we will not cover during the\ncourse\n\n![RStudio interface screenshot. Clockwise from top left: Source, Environment/History, Files/Plots/Packages/Help/Viewer, Console.](images/rstudio-screenshot.png)\n\nRStudio is divided into 4 \"Panes\": the **Source** for your scripts and documents\n(top-left, in the default layout), your **Environment/History** (top-right),\nyour **Files/Plots/Packages/Help/Viewer** (bottom-right), and \nthe R **Console** (bottom-left). The placement of these\npanes and their content can be customized (see menu, Tools -> Global Options ->\nPane Layout). \n\nOne of the advantages of using RStudio is that all the information\nyou need to write code is available in a single window. Additionally, with many\nshortcuts, auto-completion, and highlighting for the major file types you use\nwhile developing in R, RStudio will make typing easier and less error-prone.\n\n## Working directory\n\nA good way of staying organised is to keep all the files related to a given project together. Using that concept when programming is really helpful, because it makes it easier for the computer to find all the data, scripts and other information related to an analysis.\n\nWe often refer to this as the **working directory**. This simply is the starting point for the computer to look for stuff.\n\nBecause you easily accumulate a lot of files when analysing data, it's good to be organised. During this course we'll create a project folder called `data-analysis`, which we'll make our working directory.\n\nWithin this folder we'll have sub folders that allow us to further organise our data. We'll use the following structure:\n\n![The working directory structure of this course](images/working_directory.png){#fig-working_directory width=50%}\n\n| Folder | Description|\n|-----------|--------------------------------------------------------------|\n| data | Contains the data files we'll use in this course, for example `surveys.csv`. For your own analysis you might want to consider adding another folder within this to contain the `raw` data. It's good practice to always keep an untouched copy of your raw data. This helps with transparency and allows you analyse data differently in the future. Aim to keep your data cleaning and analyses programmatically. |\n| images | This folder will contain any images you might produce, for example for publications or data exploration. |\n| scripts | Here we can store any scripts we create. Here it's also good to be structured and organised, something we cover a bit more in @sec-splitting_code. |\n| ... | The opportunities are endless. You can add folders for documents, presentations, etc. How you do things matters less than being *consistent*! |\n\nAll the files in the working directory can be referenced using **relative paths**. This allows you to move you working directory across your computer - or to other computers - without breaking any of the links within your scripts.\n\n::: {.callout-important}\n## Relative versus absolute paths\n\nRelative paths are relative to a certain location on your computer. Absolute paths start from the absolute start of your hard drive. This is easiest illustrated with an example:\n\n![Relative vs absolute paths](images/working_directory_example.png){#fig-working_directory_example}\n\n:::\n\n### Creating a working directory\n\nBefore we start writing any code we'll set up our working environment properly. To do this, we'll create our `data-analysis` working directory, with all its sub folders.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nThe easiest way to set up a working directory in R is to create an **R-project**. This is simply a folder on your computer with a shortcut in it (ending in `.RProj`). When you double-click on the shortcut, it opens RStudio and sets the working directory to that particular folder. \n\nTo create an \"R Project\":\n\n::: {.carousel data-caption=\"Setting up a new working directory (click on arrows to toggle).\"}\n\n![](images/wd-setup-01.png)\n![](images/wd-setup-02.png)\n![](images/wd-setup-03.png)\n![](images/wd-setup-04.png)\n:::\n\n1. Start RStudio.\n2. Under the `File` menu, click on `New Project`. Choose `New Directory`, then\n  `New Project`.\n3. Enter a name for this new folder (or \"directory\"), and choose a convenient\n  location for it. This will be your **working directory** for the rest of the\n  day (*e.g.,* `~/data-analysis`).\n4. Click on `Create Project`.\n5. Tick `Open in new session` to ensure RStudio starts afresh.\n\nR will show you your current working directory in the `Files` pane. Alternatively, you can get it by typing in and running the `getwd()` command.\n\n## Python\n\n:::\n\n::: {.callout-important}\nComplete @ex-createwd before proceeding.\n:::\n\n## Working with R\n\nThe basis of programming is that we write down instructions for the computer to\nfollow, and then we tell the computer to follow those instructions. We write, or\n*code*, instructions in R because it is a common language that both the computer\nand we can understand. We call the instructions *commands* and we tell the\ncomputer to follow the instructions by *executing* (also called *running*) those\ncommands.\n\n### Scripts versus console\n\n| Console/terminal <i class=\"fa fa-terminal fa-1x\"></i>| Script <i class=\"fa-regular fa-file-lines fa-1x\"></i>|\n|-------------------------------------|-------------------------------------|\n| runs code directly | in essence, a text file |\n| interactive | needs to be told to run |\n| no record | records actions |\n| difficult to trace progress | transparent workflow |\n\n\nThere are two main ways of interacting with R: by using the console or by using\nscript files (plain text files that contain your code). The console pane (in\nRStudio, the bottom left panel) is the place where commands written in the R\nlanguage can be typed and executed immediately by the computer. It is also where\nthe results will be shown for commands that have been executed. You can type\ncommands directly into the console and press `Enter` to execute those commands,\nbut they will be forgotten when you close the session.\n\nBecause we want our code and workflow to be reproducible, it is better to type\nthe commands we want in the script editor, and save the script. This way, there\nis a complete record of what we did, and anyone (including our future selves!)\ncan easily replicate the results on their computer.\n\nRStudio allows you to execute commands directly from the script editor by using\nthe {{< kbd Control >}} + {{< kbd Enter >}} shortcut (on Macs, {{< kbd mac=Command >}} +\n{{< kbd mac=Return >}} will work, too). The command on the current line in the\nscript (indicated by the cursor) or all of the commands in the currently\nselected text will be sent to the console and executed when you press\n{{< kbd Control >}} + {{< kbd Enter >}}. You can find other keyboard shortcuts in this [RStudio cheatsheet about the RStudio IDE (PDF)](https://rstudio.github.io/cheatsheets/rstudio-ide.pdf).\n\n::: {.callout-warning}\n## The R prompt\n\nIf R is ready to accept commands, the R console shows a `>` prompt. If it\nreceives a command (by typing, copy-pasting or sent from the script editor using\n{{< kbd Control >}} + {{< kbd Enter >}}), R will try to execute it, and when\nready, will show the results and come back with a new `>` prompt to wait for new\ncommands.\n\nIf R is still waiting for you to enter more data because it isn't complete yet,\nthe console will show a `+` prompt. It means that you haven't finished entering\na complete command. This is because you have not 'closed' a parenthesis or\nquotation, i.e. you don't have the same number of left-parentheses as\nright-parentheses, or the same number of opening and closing quotation marks.\nWhen this happens, and you thought you finished typing your command, click\ninside the console window and press {{< kbd Escape >}}. This will cancel the incomplete\ncommand and return you to the `>` prompt.\n:::\n\n### Comments in code\n\nIt's always a good idea to add explanations to your code. We can do that with the hash tag `#` symbol, for example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This code calculates the sum of two numbers\n1 + 9\n```\n:::\n\n\n\nIt's always a good idea to add lots of comments to your code. What makes sense to you in that moment, might not a week later. Similarly, when sharing code with colleagues and collaborators, it's always good to be as clear as possible.\n\n### Splitting code {#sec-splitting_code}\n\nAs you increase your code, your script can become quite long. Often we want to split analyses into multiple scripts, for example:\n\n* `01_preprocessing` may contain data cleaning steps\n* `02_exploration` may contain exploratory plots of your data\n* `03_analysis` could contain (statistical) analyses of your data\n* `04_figures` could contain code for figures, ready for publication\n\nEach of these files could be hundreds of lines long. So, keeping track of your code makes sense. We can do that with **code headings**, which use the `# heading ----` syntax. You can even add different heading levels, by increasing the number of `#` at the start.\n\nThis creates a little table of contents in the bottom-left corner of the script pane:\n\n![Code headings](images/rstudio-codeheadings.png)\n\n## Running code {#running-code}\n\nThe simplest way of using a programming language is to use it interactively. We can do this by typing directly into the console / terminal.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nFor example, you can use R as a glorified calculator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\n12 / 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.714286\n```\n\n\n:::\n:::\n\n\n## Python\n\nFor example, you can use Python as a glorified calculator:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n3 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n8\n```\n\n\n:::\n\n```{.python .cell-code}\n12 / 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1.7142857142857142\n```\n\n\n:::\n:::\n\n\n:::\n\nRunning code like this directly in the console is generally not a good idea, because then we can't keep track of what we are doing. So, we first need to create a script to save our code in. Then, we can then play around.\n\n::: {.callout-important}\n## Complete before proceeding\nPlease complete @ex-createscript and @ex-runningcode.\n:::\n\n## Functions and their arguments\n\nFunctions are \"canned scripts\" that automate more complicated sets of commands\nincluding operations assignments, etc. Many functions are predefined, or can be\nmade available by importing *packages* (more on that later). A function\nusually takes one or more inputs called *arguments*. Functions often (but not\nalways) return a *value*. A typical example would be the function `sqrt()`. The\ninput (the argument) must be a number, and the return value (in fact, the\noutput) is the square root of that number.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(9)\n```\n:::\n\n\n## Python\n\nThe `sqrt()` function is not available by default, but is stored in the `math` module. Before we can use it, we need to load this module:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport math\n```\n:::\n\n\nNext, we can use the `sqrt()` function, specifying that it comes from the `math`module. We separate the two with a full-stop (`.`):\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmath.sqrt(9)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3.0\n```\n\n\n:::\n:::\n\n\n:::\n\nHere, the value `9` is given to the `sqrt()` function. This function\ncalculates the square root, and returns the value. This function is very simple, because it takes just one argument.\n\nThe return 'value' of a function need not be numerical (like that of `sqrt()`),\nand it also does not need to be a single item: it can be a set of things, or\neven a data set. We'll see that when we read data files.\n\n\n### Arguments\n\nArguments allow you to control the behaviour of a function. They can be anything, not only numbers or file names. Exactly what each argument means differs per function and can be looked up in the documentation. Some functions take arguments which may either be specified by the user, or, if left out, take on a *default* value: these are called *options*.\n\nOptions are typically used to alter the way the\nfunction operates, such as if it should ignore missing values, or what symbol to\nuse in a plot.  However, if you want something specific, you can specify a value\nof your choice which will be used instead of the default.\n\nLet's try a function that can take multiple arguments: `round()`.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.14159)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nround(3.14159)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3\n```\n\n\n:::\n:::\n\n\n:::\n\nHere, we've called `round()` with just one argument, `3.14159`, and it has\nreturned the value `3`.  That's because the default is to round to the nearest\nwhole number. If we want more digits we can see how to do that by getting\ninformation about the `round()` function.  \n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can use `args(round)` to find what arguments it takes, or look at the help for this function using `?round`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(round)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (x, digits = 0, ...) \nNULL\n```\n\n\n:::\n:::\n\n\nWe see that if we want a different number of digits, we can\ntype `digits = 2` or however many we want. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(x = 3.14159, digits = 2)\n```\n:::\n\n\nIf you provide the arguments in the exact same order as they are defined you\ndon't have to name them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.14159, 2)\n```\n:::\n\n\nAnd if you do name the arguments, you can switch their order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(digits = 2, x = 3.14159)\n```\n:::\n\n\n## Python\nWe can use `help(round)` to find what arguments it takes.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nhelp(round)\n```\n:::\n\n\nWe see that if we want a different number of digits, we can\ntype `ndigits = 2` or however many we want. For example:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nround(3.14159, ndigits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3.14\n```\n\n\n:::\n:::\n\n\nIf you provide the arguments in the exact same order as they are defined you\ndon't have to name them:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nround(3.14159, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3.14\n```\n\n\n:::\n:::\n\n\nPython still expects the arguments in the correct order, so this gives an error:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nround(ndigits = 2, 3.14159)\n```\n:::\n\n:::\n\nIt's good practice be explicit about the names of the arguments. That way you can avoid confusion later on when looking back at your code or when sharing your code.\n\n\n## Adding functionality using packages\nLO: adding functionality (installing + loading packages)\nLO: For Python: requires `numpy` for next section\n\n\n## Exercises\n\n:::{.callout-exercise #ex-createwd}\n#### Creating a working directory\n{{< level 1 >}}\n\nCreate a working directory called `data-analysis`. When you've done this, add the following sub folders:\n\n* `data`\n* `scripts`\n* `images`\n\n**Note**: programming languages are case-sensitive, so `data` is not treated the same way as `Data`.\n:::\n\n:::{.callout-exercise #ex-createscript}\n#### Creating a script\n{{< level 1 >}}\n\nCreate a script and save it as `session_01` in the `scripts` folder within your working directory.\n\n:::{.callout-hint}\nRemember, you will need to add an extension to the file. This is `.R` for R scripts or `.py` for Python ones.\n:::\n:::\n\n:::{.callout-exercise #ex-runningcode}\n#### Running code\n{{< level 1 >}}\n\nIn your new script `session_01`, run some mathematical operations, such as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n8 * 4\n6 - 9\n```\n:::\n\n\n:::{.callout-hint}\nRemember, you run the code using <kbd>Ctrl</kbd> + <kbd>Enter</kbd> (or <kbd>Command</kbd> + <kbd>Enter</kbd> on Mac).\n:::\n\n:::\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- \n:::\n",
    "supporting": [
      "01-intro-software_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}