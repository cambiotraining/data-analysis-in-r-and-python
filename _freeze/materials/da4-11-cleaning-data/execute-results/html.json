{
  "hash": "ebb323f22b978b6a9eed9c61da01c55b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Cleaning data\n---\n\n::: {.callout-tip}\n#### Learning objectives\n\n- \n:::\n\n\n## Context\nOften data is in a messy state before you can work with it. So, it is useful to know when and how to make changes to your data.\n\n## Section setup {#setup_grouped_operations}\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe'll continue this section with the script named `da4-11-cleaning-data.R`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A collection of R packages designed for data science\nlibrary(tidyverse)\n\nsurveys <- read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n## Python\n\nWe'll continue this section with the script named `da4-11-cleaning-data.py`. If needed, add the following code to the top of your script and run it.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\nsurveys = pd.read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n:::\n:::\n\n## Joining tables\n\n### The importance of an indentifier\nLO: a common identifier (more generally, unique identifiers are really important - e.g. mention LMM)\n\n### Joining tables\nLO:  joining tables\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_types <- read_csv(\"data/plots.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 24 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): plot_type\ndbl (1): plot_id\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(plot_types)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  plot_id plot_type                \n    <dbl> <chr>                    \n1       1 Spectab exclosure        \n2       2 Control                  \n3       3 Long-term Krat Exclosure \n4       4 Control                  \n5       5 Rodent Exclosure         \n6       6 Short-term Krat Exclosure\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys |> count(plot_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24 × 2\n   plot_id     n\n     <dbl> <int>\n 1       1  1995\n 2       2  2194\n 3       3  1828\n 4       4  1969\n 5       5  1194\n 6       6  1582\n 7       7   816\n 8       8  1891\n 9       9  1936\n10      10   469\n# ℹ 14 more rows\n```\n\n\n:::\n:::\n\n\nWe'll be adding the data from `plot_types` to the existing `surveys` data. We can do this as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(surveys, plot_types, by = \"plot_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 10\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2         2     7    16  1977       3 NL         M                  33     NA\n 3         3     7    16  1977       2 DM         F                  37     NA\n 4         4     7    16  1977       7 DM         M                  36     NA\n 5         5     7    16  1977       3 DM         M                  35     NA\n 6         6     7    16  1977       1 PF         M                  14     NA\n 7         7     7    16  1977       2 PE         F                  NA     NA\n 8         8     7    16  1977       1 DM         M                  37     NA\n 9         9     7    16  1977       1 DM         F                  34     NA\n10        10     7    16  1977       6 PF         F                  20     NA\n# ℹ 35,539 more rows\n# ℹ 1 more variable: plot_type <chr>\n```\n\n\n:::\n:::\n\n\nLet's assign that output to an object called `surveys_full`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_full <- left_join(surveys, plot_types, by = \"plot_id\")\n```\n:::\n\n\nHaving this information now allows us to plot the data by `plot_type` in a much more meaningful way than if we would have used `plot_id`. For example, let's look at the `hindfoot_length` for each `plot_type`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(surveys_full, aes(x = plot_type, y = hindfoot_length)) +\n  geom_boxplot()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 4111 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Boxplot of hindfoot length for each plot type](da4-11-cleaning-data_files/figure-html/fig-plot_hind-1.png){#fig-plot_hind width=672}\n:::\n:::\n\n\n\n## Python\n:::\n\n## Cleaning data\n\n### Changing `plot_id`\n\nIn the example above we saw that it wasn't great practice to just use numbers to indicate `plot_id`, since they obviously have no numerical value.\n\nIt would be better to encode them in the format `plot_xxx` where `xxx` is a number with leading zeros (so that it sorts nicely).\n\nWe can do that as follows:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_types |> \n  mutate(plot_id = paste0(\"plot_\", sprintf(\"%03d\", plot_id)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24 × 2\n   plot_id  plot_type                \n   <chr>    <chr>                    \n 1 plot_001 Spectab exclosure        \n 2 plot_002 Control                  \n 3 plot_003 Long-term Krat Exclosure \n 4 plot_004 Control                  \n 5 plot_005 Rodent Exclosure         \n 6 plot_006 Short-term Krat Exclosure\n 7 plot_007 Rodent Exclosure         \n 8 plot_008 Control                  \n 9 plot_009 Spectab exclosure        \n10 plot_010 Rodent Exclosure         \n# ℹ 14 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\n:::\n\nNote: this means that you would also have to change the `plot_id` column values in the `surveys` data set, if you wanted to combine the data from these tables!\n\n\n### Variable naming\nLO: variable naming (janitor package)\n\n### Encoding issues\nLO: encoding issues\n\n### Missing data\nLO: dealing with missing data\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- \n:::\n",
    "supporting": [
      "da4-11-cleaning-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}