{
  "hash": "611c3d5481a6ece606538baa7bb04bcd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Manipulating rows\n---\n\n::: {.callout-tip}\n#### Learning objectives\n\n- \n:::\n\n\n## Context\nData sets can contain large quantities of observations. Often we are only interested in part of the data at a given time. We can deal with this by manipulating rows.\n\n## Section setup {#setup_manipulating_rows}\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe'll continue this section with the script named `05-manipulation.R`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A collection of R packages designed for data science\nlibrary(tidyverse)\n\nsurveys <- read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n## Python\n\nWe'll continue this section with the script named `05-manipulation.py`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\nsurveys = pd.read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n:::\n:::\n\n\n## Manipulation of observations\n\n### Ordering rows\nWe often want to order data in a certain way, for example ordering by date or in alphabetically. The example below illustrates how we would order data based on `weight`:\n\n::: {.carousel data-caption=\"Ordering by weight in ascending order (click to toggle).\"}\n\n![](images/manipulation-order_main.png)\n![](images/manipulation-order_weight.png)\n:::\n\nLet's illustrate this with the `surveys` data set, arranging the data based on `year`.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys |> \n  arrange(year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 9\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2         2     7    16  1977       3 NL         M                  33     NA\n 3         3     7    16  1977       2 DM         F                  37     NA\n 4         4     7    16  1977       7 DM         M                  36     NA\n 5         5     7    16  1977       3 DM         M                  35     NA\n 6         6     7    16  1977       1 PF         M                  14     NA\n 7         7     7    16  1977       2 PE         F                  NA     NA\n 8         8     7    16  1977       1 DM         M                  37     NA\n 9         9     7    16  1977       1 DM         F                  34     NA\n10        10     7    16  1977       6 PF         F                  20     NA\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\nIf we'd want to arrange the data in *descending* order (most recent to oldest), we would employ the `desc()` helper function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys |> \n  arrange(desc(year))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 9\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1     33321     1    12  2002       1 DM         M                  38     44\n 2     33322     1    12  2002       1 DO         M                  37     58\n 3     33323     1    12  2002       1 PB         M                  28     45\n 4     33324     1    12  2002       1 AB         <NA>               NA     NA\n 5     33325     1    12  2002       1 DO         M                  35     29\n 6     33326     1    12  2002       2 OT         F                  20     26\n 7     33327     1    12  2002       2 OT         M                  20     24\n 8     33328     1    12  2002       2 OT         F                  21     22\n 9     33329     1    12  2002       2 DM         M                  37     47\n10     33330     1    12  2002       2 DO         M                  35     51\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\nWe can read that bit of code as \"take the `surveys` data set, send it to the `arrange()` function and ask it to arrange the data in descending order (using `desc()`) based on the `year` column\".\n\nWe can also combine this approach with multiple variables, for example arranging data based on descending year *and* (ascending) hindfoot length:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys |> \n  arrange(desc(year), hindfoot_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 9\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1     33647     3    14  2002       3 PF         M                   9      8\n 2     35301    12     8  2002       4 PF         M                  13      6\n 3     35506    12    31  2002       6 PF         M                  13      8\n 4     34281     6    15  2002      23 RM         F                  14      9\n 5     34663     7    14  2002      16 RM         M                  14      7\n 6     35101    11    10  2002       9 PF         M                  14      7\n 7     35487    12    29  2002      23 RO         F                  14     13\n 8     33429     2     9  2002       3 PF         M                  15      8\n 9     33535     2    10  2002      13 PF         F                  15      7\n10     33556     2    10  2002       5 RO         M                  15      9\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\n:::\n\n### Finding unique values\nLO: finding unique rows\n\n### Filtering by condition\nLO: filtering rows by condition\n\n![The logic behind filtering: for each row the condition is checked (here: `hindfoot_length > 31`). If the outcome is `TRUE` then the row is returned.](images/manipulation-filter_rows.png){#fig-manipulation_filter_rows}\n\n### Missing data revisited\nLO: dealing with missing data\n\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- \n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}