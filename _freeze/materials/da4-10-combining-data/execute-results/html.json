{
  "hash": "cddbb9c5ac02ff6416b9ab211c0bdc85",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Combining data\n---\n\n::: {.callout-tip}\n#### Learning objectives\n\n- Learn how to join two tables together.\n- Be able to distinguish between different types of joins.\n- Use filtering joins to identify (mis)matches between tables.\n:::\n\n\n## Context\nData is often split over multiple tables. We saw this in the previous section. Sometimes we need to combine information from multiple sources.\n\n## Section setup {#setup_grouped_operations}\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe'll continue this section with the script named `da4-10-combining-data.R`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A collection of R packages designed for data science\nlibrary(tidyverse)\n\nsurveys <- read_csv(\"data/surveys.csv\")\nplot_types <- read_csv(\"data/plots.csv\")\n```\n:::\n\n\n## Python\n\nWe'll continue this section with the script named `da4-10-combining-data.py`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\nsurveys = pd.read_csv(\"data/surveys.csv\")\nplot_types = pd.read_csv(\"data/plots.csv\")\n```\n:::\n\n\n:::\n:::\n\n## Joining tables\n\n### The importance of an indentifier\nLO: a common identifier (more generally, unique identifiers are really important - e.g. mention LMM)\n\n### Joining tables\nThere are different ways you can join tables, depending on which data you'd like to retain. The way these joins are named often depend on the *direction* in which you are joining. Let's look at this in more detail, using examples.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_types <- read_csv(\"data/plots.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 5 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): plot_type\ndbl (1): plot_id\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nLet's look at the data. We can see that there are five distinct plot types encoded in these data, using `plot_id` as a key.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_types\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  plot_id plot_type                \n    <dbl> <chr>                    \n1       1 Spectab exclosure        \n2       2 Control                  \n3       3 Long-term Krat Exclosure \n4       4 Rodent Exclosure         \n5       5 Short-term Krat Exclosure\n```\n\n\n:::\n:::\n\n\nNow let's look at our `surveys` data set. We know we have a `plot_id` column there, too. Let's check how many times the different `plot_id` values occur in our data. For this, we can use the `count()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys |> count(plot_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24 × 2\n   plot_id     n\n     <dbl> <int>\n 1       1  1995\n 2       2  2194\n 3       3  1828\n 4       4  1969\n 5       5  1194\n 6       6  1582\n 7       7   816\n 8       8  1891\n 9       9  1936\n10      10   469\n# ℹ 14 more rows\n```\n\n\n:::\n:::\n\n\nThis shows that there are 24 `plot_id` values (there are 24 rows in the output). So, the `plot_types` data set won't contain information on *all* of these, since it only contains 5 distinct plots.\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplot_types = pd.read_csv(\"data/plots.csv\")\n```\n:::\n\n\nLet’s look at the data. We can see that there are five distinct plot types encoded in these data, using `plot_id` as a key.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplot_types\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   plot_id                  plot_type\n0        1          Spectab exclosure\n1        2                    Control\n2        3   Long-term Krat Exclosure\n3        4           Rodent Exclosure\n4        5  Short-term Krat Exclosure\n```\n\n\n:::\n:::\n\n\nNow let’s look at our `surveys` data set. We know we have a `plot_id` column there, too. Let’s check how many times the different `plot_id` values occur in our data. \n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys.groupby('plot_id').size().reset_index(name='n')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    plot_id     n\n0         1  1995\n1         2  2194\n2         3  1828\n3         4  1969\n4         5  1194\n5         6  1582\n6         7   816\n7         8  1891\n8         9  1936\n9        10   469\n10       11  1918\n11       12  2365\n12       13  1538\n13       14  1885\n14       15  1069\n15       16   646\n16       17  2039\n17       18  1445\n18       19  1189\n19       20  1390\n20       21  1173\n21       22  1399\n22       23   571\n23       24  1048\n```\n\n\n:::\n:::\n\n\nThis shows that there are 24 `plot_id` values (there are 24 rows in the output). So, the `plot_types` data set won’t contain information on all of these, since it only contains 5 distinct plots.\n:::\n\n### Left joins\n\nWe'll be adding the data from `plot_types` to the existing `surveys` data. This uses the following principle:\n\n![Left join: table b to a](images/join_left.png){#fig-join_left}\n\nThis means that any `plot_id` that appears in `surveys`, but isn't present in `plot_types` will be empty or missing for its `plot_type` value.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(surveys, plot_types, by = \"plot_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 10\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2         2     7    16  1977       3 NL         M                  33     NA\n 3         3     7    16  1977       2 DM         F                  37     NA\n 4         4     7    16  1977       7 DM         M                  36     NA\n 5         5     7    16  1977       3 DM         M                  35     NA\n 6         6     7    16  1977       1 PF         M                  14     NA\n 7         7     7    16  1977       2 PE         F                  NA     NA\n 8         8     7    16  1977       1 DM         M                  37     NA\n 9         9     7    16  1977       1 DM         F                  34     NA\n10        10     7    16  1977       6 PF         F                  20     NA\n# ℹ 35,539 more rows\n# ℹ 1 more variable: plot_type <chr>\n```\n\n\n:::\n:::\n\n\nLet's assign that output to an object called `surveys_left`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_left <- left_join(surveys, plot_types, by = \"plot_id\")\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys_left = pd.merge(surveys, plot_types, how = \"left\", on = \"plot_id\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys_left\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       record_id  month  ...  weight                  plot_type\n0              1      7  ...     NaN                    Control\n1              2      7  ...     NaN   Long-term Krat Exclosure\n2              3      7  ...     NaN                    Control\n3              4      7  ...     NaN                        NaN\n4              5      7  ...     NaN   Long-term Krat Exclosure\n...          ...    ...  ...     ...                        ...\n35544      35545     12  ...     NaN                        NaN\n35545      35546     12  ...     NaN                        NaN\n35546      35547     12  ...    14.0                        NaN\n35547      35548     12  ...    51.0                        NaN\n35548      35549     12  ...     NaN  Short-term Krat Exclosure\n\n[35549 rows x 10 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\nHaving this information now allows us to plot the data by `plot_type` in a much more meaningful way than if we would have used `plot_id`. For example, let's look at the `hindfoot_length` for each `plot_type`.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(surveys_left, aes(x = plot_type, y = hindfoot_length)) +\n  geom_boxplot()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 4111 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Boxplot of hindfoot length for each plot type](da4-10-combining-data_files/figure-html/fig-plot_hind-1.png){#fig-plot_hind width=672}\n:::\n:::\n\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(surveys_left, aes(x = \"plot_type\", y = \"hindfoot_length\")) +\n  geom_boxplot())\n  \np.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n/Users/martinvanrongen/miniforge3/envs/mv372/lib/python3.13/site-packages/plotnine/layer.py:284: PlotnineWarning: stat_boxplot : Removed 4111 rows containing non-finite values.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Boxplot of hindfoot length for each plot type](da4-10-combining-data_files/figure-html/fig-plot_hind_py-1.png){#fig-plot_hind_py width=614}\n:::\n:::\n\n\n:::\n\n### Right joins\n\n![Right join: table a to b](images/join_right.png){#fig-join_right}\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(surveys, plot_types, by = \"plot_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,180 × 10\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2         2     7    16  1977       3 NL         M                  33     NA\n 3         3     7    16  1977       2 DM         F                  37     NA\n 4         5     7    16  1977       3 DM         M                  35     NA\n 5         6     7    16  1977       1 PF         M                  14     NA\n 6         7     7    16  1977       2 PE         F                  NA     NA\n 7         8     7    16  1977       1 DM         M                  37     NA\n 8         9     7    16  1977       1 DM         F                  34     NA\n 9        11     7    16  1977       5 DS         F                  53     NA\n10        13     7    16  1977       3 DM         M                  35     NA\n# ℹ 9,170 more rows\n# ℹ 1 more variable: plot_type <chr>\n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys_right = pd.merge(surveys, plot_types, how = \"right\", on = \"plot_id\")\n```\n:::\n\n\nLet's see how many rows we've retained.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlen(surveys_right)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n9180\n```\n\n\n:::\n:::\n\n\n:::\n\nWe can see that we have far fewer rows left (9180) than in the full data set (35549). This is because all the rows where there isn't a match for `plot_id` in the `surveys` data set are dropped.\n\n### Inner joins\n\n![Inner join: retain values present in both tables](images/join_inner.png){#fig-join_inner}\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(surveys, plot_types, by = \"plot_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,180 × 10\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2         2     7    16  1977       3 NL         M                  33     NA\n 3         3     7    16  1977       2 DM         F                  37     NA\n 4         5     7    16  1977       3 DM         M                  35     NA\n 5         6     7    16  1977       1 PF         M                  14     NA\n 6         7     7    16  1977       2 PE         F                  NA     NA\n 7         8     7    16  1977       1 DM         M                  37     NA\n 8         9     7    16  1977       1 DM         F                  34     NA\n 9        11     7    16  1977       5 DS         F                  53     NA\n10        13     7    16  1977       3 DM         M                  35     NA\n# ℹ 9,170 more rows\n# ℹ 1 more variable: plot_type <chr>\n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys_inner = pd.merge(surveys, plot_types, how = \"inner\", on = \"plot_id\")\n```\n:::\n\n\nLet's see how many rows we've retained.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlen(surveys_inner)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n9180\n```\n\n\n:::\n:::\n\n\n:::\n\nThis actually gives the same result as with the right join (9180  rows), which is because there aren't any rows in `plot_type` that *don't* have a match in `surveys`.\n\n### Full joins\n\n![Full join: retain all values](images/join_full.png){#fig-join_full}\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(surveys, plot_types, by = \"plot_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 10\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2         2     7    16  1977       3 NL         M                  33     NA\n 3         3     7    16  1977       2 DM         F                  37     NA\n 4         4     7    16  1977       7 DM         M                  36     NA\n 5         5     7    16  1977       3 DM         M                  35     NA\n 6         6     7    16  1977       1 PF         M                  14     NA\n 7         7     7    16  1977       2 PE         F                  NA     NA\n 8         8     7    16  1977       1 DM         M                  37     NA\n 9         9     7    16  1977       1 DM         F                  34     NA\n10        10     7    16  1977       6 PF         F                  20     NA\n# ℹ 35,539 more rows\n# ℹ 1 more variable: plot_type <chr>\n```\n\n\n:::\n:::\n\n\n## Python\n\nThe \"full\" join in pandas' `merge()` function is referred to as `\"outer\"`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys_full = pd.merge(surveys, plot_types, how = \"outer\", on = \"plot_id\")\n```\n:::\n\n\nLet's see how many rows we've retained.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlen(surveys_full)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n35549\n```\n\n\n:::\n:::\n\n\n:::\n\nThis again gives us our entire `surveys` data set, including the additional `plot_type` information where available. The reason why this is not different to the left join is because there are no rows in `plot_types` that do not have a match in `surveys`.\n\n### Filtering joins\n\nThere is one last set of joins we haven't discussed yet: filtering joins. These can be really helpful if you're comparing two tables and want to specifically extract the rows that are either present (**semi-join**) or absent (**anti-join**) in the other table.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nSemi-join:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsemi_join(surveys, plot_types, by = \"plot_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,180 × 9\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2         2     7    16  1977       3 NL         M                  33     NA\n 3         3     7    16  1977       2 DM         F                  37     NA\n 4         5     7    16  1977       3 DM         M                  35     NA\n 5         6     7    16  1977       1 PF         M                  14     NA\n 6         7     7    16  1977       2 PE         F                  NA     NA\n 7         8     7    16  1977       1 DM         M                  37     NA\n 8         9     7    16  1977       1 DM         F                  34     NA\n 9        11     7    16  1977       5 DS         F                  53     NA\n10        13     7    16  1977       3 DM         M                  35     NA\n# ℹ 9,170 more rows\n```\n\n\n:::\n:::\n\n\nAnti-join:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_join(surveys, plot_types, by = \"plot_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 26,369 × 9\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1         4     7    16  1977       7 DM         M                  36     NA\n 2        10     7    16  1977       6 PF         F                  20     NA\n 3        12     7    16  1977       7 DM         M                  38     NA\n 4        14     7    16  1977       8 DM         <NA>               NA     NA\n 5        15     7    16  1977       6 DM         F                  36     NA\n 6        20     7    17  1977      11 DS         F                  48     NA\n 7        21     7    17  1977      14 DM         F                  34     NA\n 8        22     7    17  1977      15 NL         F                  31     NA\n 9        23     7    17  1977      13 DM         M                  36     NA\n10        24     7    17  1977      13 SH         M                  21     NA\n# ℹ 26,359 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\nSemi-join:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys[surveys[\"plot_id\"].isin(plot_types[\"plot_id\"])]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       record_id  month  day  year  ...  species_id  sex hindfoot_length  weight\n0              1      7   16  1977  ...          NL    M            32.0     NaN\n1              2      7   16  1977  ...          NL    M            33.0     NaN\n2              3      7   16  1977  ...          DM    F            37.0     NaN\n4              5      7   16  1977  ...          DM    M            35.0     NaN\n5              6      7   16  1977  ...          PF    M            14.0     NaN\n...          ...    ...  ...   ...  ...         ...  ...             ...     ...\n35498      35499     12   31  2002  ...          PB    F            27.0    28.0\n35499      35500     12   31  2002  ...          PB    F            25.0    28.0\n35500      35501     12   31  2002  ...          DO    M            33.0    48.0\n35501      35502     12   31  2002  ...          PP    M            21.0    16.0\n35548      35549     12   31  2002  ...         NaN  NaN             NaN     NaN\n\n[9180 rows x 9 columns]\n```\n\n\n:::\n:::\n\n\nAnti-join:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys[~surveys[\"plot_id\"].isin(plot_types[\"plot_id\"])]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       record_id  month  day  year  ...  species_id  sex hindfoot_length  weight\n3              4      7   16  1977  ...          DM    M            36.0     NaN\n9             10      7   16  1977  ...          PF    F            20.0     NaN\n11            12      7   16  1977  ...          DM    M            38.0     NaN\n13            14      7   16  1977  ...          DM  NaN             NaN     NaN\n14            15      7   16  1977  ...          DM    F            36.0     NaN\n...          ...    ...  ...   ...  ...         ...  ...             ...     ...\n35543      35544     12   31  2002  ...          US  NaN             NaN     NaN\n35544      35545     12   31  2002  ...          AH  NaN             NaN     NaN\n35545      35546     12   31  2002  ...          AH  NaN             NaN     NaN\n35546      35547     12   31  2002  ...          RM    F            15.0    14.0\n35547      35548     12   31  2002  ...          DO    M            36.0    51.0\n\n[26369 rows x 9 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- We can use left, right, inner and outer/full joins to merge two tables together.\n- There needs to be at least one matching column between the two tables that can be used as a key to link them.\n- We can also use filter joins to identify rows in a table that are present/absent in the other\n:::\n",
    "supporting": [
      "da4-10-combining-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}