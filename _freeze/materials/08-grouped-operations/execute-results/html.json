{
  "hash": "bde1faf0edab5b0ce68a7555f6277403",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Grouped operations\n---\n\n::: {.callout-tip}\n#### Learning objectives\n\n- \n:::\n\n\n## Context\n\nWe’ve done different types of operations, all on the entire data set. Sometimes there is structure within the data, such as different groups (e.g. genotypes, patient cohorts, geographical areas etc). We might then want information on a group-by-group basis.\n\n## Section setup {#setup_grouped_operations}\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe'll continue this section with the script named `05-manipulation.R`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A collection of R packages designed for data science\nlibrary(tidyverse)\n\nsurveys <- read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n## Python\n\nWe'll continue this section with the script named `05-manipulation.py`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\nsurveys = pd.read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n:::\n:::\n\n## Split-apply-combine\n\nConceptually, this kind of operation can be referred to as split-apply-combine, because we split the data, apply some function and then combine the outcome.\n\nLet's illustrate this with an example. @fig-groupby_table shows a hypothetical data set, where we have temperature and rainfall measurements for different cities.\n\n![An example of a table with groups](images/groupby_table.png){#fig-groupby_table}\n\nLet's assume we were interested in the average temperature for each city. We would have to do the following:\n\n1. Split the data by `city`\n2. Calculate the average `temperature`\n3. Combine the outcome together in a new table\n\nThis is visualised in @fig-groupby_split.\n\n![Split-apply-combine](images/groupby_split.png){#fig-groupby_split}\n\n## Summary operations\n\nLet's put this into practice with our data set.\n\n### Summarising data\n\nA common task in data analysis is to summarise variables to get a sense of their average and variation.\n\nFor example, let’s calculate what the mean and standard deviation are for `weight`.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can achieve this task using the `summarise()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys |> \n  summarise(weight_mean = mean(weight, na.rm  = TRUE),\n            weight_sd = sd(weight, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  weight_mean weight_sd\n        <dbl>     <dbl>\n1        42.7      36.6\n```\n\n\n:::\n:::\n\n\nA couple of things to notice:\n\nThe output of `summarise` is a new table, where each column is named according to the input to `summarise()`.\n\nWithin `summarise()` we should use functions for which the output is a single value.\nAlso notice that, above, we used the `na.rm` option within the summary functions, so that they ignored missing values when calculating the respective statistics.\n\n## Python\n\n:::\n\n### Grouped summaries\n\nIn most cases we want to calculate summary statistics within groups of our data. \n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can achieve this by combining `summarise()` with the `group_by()` function. For example, let’s modify the previous example to calculate the summary for each `sex` group:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys |> \n  group_by(sex) |> \n  summarise(weight_mean = mean(weight, na.rm  = TRUE),\n            weight_sd = sd(weight, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  sex   weight_mean weight_sd\n  <chr>       <dbl>     <dbl>\n1 F            42.2      36.8\n2 M            43.0      36.2\n3 <NA>         64.7      62.2\n```\n\n\n:::\n:::\n\n\nThe table output now includes both the columns we defined within `summarise()` as well as the grouping columns defined within `group_by()`.\n\n## Python\n:::\n\n## Counting data\n\n### Counting\nLO: counting\n\n### Counting by group\nLO: counting data by group\n\n### Counting missing values\nLO: counting with missing values\n\n\n## Grouped operations\n\n### Grouped filters\nLO: grouped filters\n\n### Grouped changes\nLO: grouped mutate\n\n### To ungroup or not ungroup\nLO: the importance of ungrouping\n\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- \n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}