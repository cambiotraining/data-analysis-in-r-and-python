{
  "hash": "cc6a9328713cef37d463edba67e35119",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Plotting data\n---\n\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-tip}\n#### Learning objectives\n\n- Learn to create plots.\n- Be able to build up plots in multiple layers.\n- Make changes to plot colours and other aesthetics.\n- Be able to create sub-panels based on data.\n- Export/save plots to file.\n:::\n\n## Context\n\nWe now have a good grasp of how data is commonly structured, with variables in columns and observations in rows. This is the perfect format for visualising data.\n\n## Section setup {#setup_plotting}\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe'll continue this section with the script named `02_session`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A collection of R packages designed for data science\nlibrary(tidyverse)\n\nsurveys <- read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n## Python\n\nWe'll continue this section with the Notebook named `02_session`. Add the following code to the first cell and run it.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\n# If using seaborn for plotting\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsurveys = pd.read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n:::\n\n## Introducing plotting\n\nTo create a plot we'll need three things:\n\n| | | |\n|------|-------------|--------------------------------|\n| <i class=\"fa fa-table-list fa-1x\"></i> | 1. Data | your data |\n| <i class=\"fa fa-chart-line fa-1x\"></i> | 2. Mapping aesthetics | variables used to create the visual (e.g. x/y data, colours) |\n| <i class=\"fa fa-chart-column fa-1x\"></i> | 3. Specify the type of plot | e.g. scatter plot, boxplot, line graph |\n\nThis breakdown of plotting is often associated with R's `ggplot2` package, but the underlying principles of the `gg` (**grammar of graphics**) is a much more universal approach to creating graphs.\n\nThe idea is that you consistently build up plots, layer-by-layer. I like the concept, because it creates consistency in our approach - regardless of the language. There is a Python implementation of `ggplot2`, called `plotnine`.\n\nWe'll be using these libraries/modules here, but will also show you some examples of other commonly-used plotting packages. You'll probably develop your own preference - this is absolutely fine!\n\n\n### Start plotting\n\nIf needed, add and run the code from [Section setup](#setup_plotting).\n\nHere we are using the `surveys` data set. Let's assume that we're interested in the relationship between two variables: `weight` and `hindfoot_length`. We can plot `weight` on the x-axis and `hindfoot_length` on the y-axis.\n\nSince they are both continuous data, a scatter plot would be a good way to represent these data.\n\nSo, we need three things: (1) data; (2) mapping of aesthetics and (3) specify the type of plot.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe use the `ggplot()` function to do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Scatterplot of weight vs hindfoot_length](da2-04-plotting_files/figure-html/fig-weight_hind_scatter-1.png){#fig-weight_hind_scatter width=672}\n:::\n:::\n\n\n## Python\n\nWe use the `ggplot()` function to do this. Note that the whole code chunk below is wrapped inside another set of parentheses `( )`. This allows us to break up the code a bit for clarity. Also, the variable names that we're giving to `ggplot()` are inside quotes `\" \"` - this is different from R, where this is not necessary.\n\nAdditionally, if you're running this directly from a Python script, it might not always output the plot inline. To avoid issues with this, we assign the plot to an object `p` and specifically ask Python to display it using `p.show()`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(data = surveys,\n        mapping = aes(x = \"weight\", y = \"hindfoot_length\")) + \n  geom_point())\n\np.show()\n```\n\n::: {.cell-output-display}\n![Scatterplot of weight vs hindfoot_length](da2-04-plotting_files/figure-html/fig-weight_hind_scatter_py-1.png){#fig-weight_hind_scatter_py width=614}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.scatterplot(\n    data = surveys,\n    x = \"weight\",\n    y = \"hindfoot_length\"\n)\n\nplt.title(\"Scatterplot of weight vs hindfoot_length\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Scatterplot of weight vs hindfoot_length](da2-04-plotting_files/figure-html/fig-weight_hind_scatter_seaborn-3.png){#fig-weight_hind_scatter_seaborn width=672}\n:::\n:::\n\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Pandas equivalent\n\nFor simple plots you can also use the built-in plotting functionality from `pandas`. We'll only show this once, because there are so many different ways to plot data that we don't want to clutter the materials. However, it can be useful if you want to have a quick preview of your data. More information on this can be found in the [official documentation](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html).\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsurveys.plot(x = \"weight\", y = \"hindfoot_length\", kind = \"scatter\")\n```\n\n::: {.cell-output-display}\n![Scatterplot of weight vs hindfoot_length](da2-04-plotting_files/figure-html/fig-weight_hind_scatter_pandas-5.png){#fig-weight_hind_scatter_pandas width=672}\n:::\n:::\n\n\n:::\n\n:::\n\nLet's unpack that a bit. We specify which data to use with the `data =` argument (our `surveys` data set in this case).\n\nNext, we define what goes onto the `x` and `y` axes, using the `mapping =` argument. This needs a so-called *helper function* `aes()`, which stands for *aesthetics*. Within this helper function we define what goes onto the x-axis (`x =`) and y-axis (`y =`).\n\nFinally, we need to tell it *what kind of plot* we want. Here, we want to use a scatter plot. The type of plot is determined by the `geom_`. This literally gets added to the `ggplot()` function: note the `+` symbol at the end of the line of code.\n\nMost `geom_` functions are logically named. For example, a line graph will be `geom_line()`, a boxplot `geom_boxplot()` etc. The odd one out is the scatter plot, which is `geom_point()`, because we're plotting individual data points.\n\nWe don't have to add any information within the `geom_point()` function, because it's taking all it needs from the `ggplot()` function above. More on this later.\n\n### Building up plots\n\nThe good thing about `ggplot()` is that it builds up the plot layer-by-layer. We don't even have to provide it with a geometry to start with and it'll still create the outline of a plot. Let's illustrate this with another example, where we plot `hindfoot_length` on the y-axis for each `sex` group.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = sex, y = hindfoot_length))\n```\n\n::: {.cell-output-display}\n![Geometries are needed to visualise the data.](da2-04-plotting_files/figure-html/fig-weight_hind_scatter_no_geom-7.png){#fig-weight_hind_scatter_no_geom width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(data = surveys,\n        mapping = aes(x = \"sex\", y = \"hindfoot_length\")))\n\np.show()\n```\n\n::: {.cell-output-display}\n![Geometries are needed to visualise the data.](da2-04-plotting_files/figure-html/fig-weight_hind_scatter_no_geom_py-1.png){#fig-weight_hind_scatter_no_geom_py width=614}\n:::\n:::\n\n:::\n\nHowever, that obviously is not very useful. The nice thing is that we can add multiple layers to a single plot. We have a column `sex` in the data. This contains three possible values:`F` (female),  `M` (male) and `NA` (not recorded).\n\nLet's look at the hindfoot length distribution across these groups.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = sex, y = hindfoot_length)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Scatterplot of hindfoot length for each sex.](da2-04-plotting_files/figure-html/fig-sex_hind_scatter-3.png){#fig-sex_hind_scatter width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(data = surveys,\n        mapping = aes(x = \"sex\", y = \"hindfoot_length\")) +\n        geom_point())\n\np.show()\n```\n\n::: {.cell-output-display}\n![Scatterplot of hindfoot length for each sex.](da2-04-plotting_files/figure-html/fig-sex_hind_scatter_py-1.png){#fig-sex_hind_scatter_py width=614}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.stripplot(\n    data = surveys,\n    x = \"sex\",\n    y = \"hindfoot_length\",\n    jitter = True    # to spread points horizontally like geom_point on a category\n)\n\nplt.title(\"Hindfoot length by sex\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Scatterplot of hindfoot length for each sex.](da2-04-plotting_files/figure-html/fig-sex_hind_scatter_seaborn-3.png){#fig-sex_hind_scatter_seaborn width=672}\n:::\n:::\n\n\n:::\n\n:::\n\nA lot of the points are overlapping, which makes it a bit hard to see how the data are distributed. We can do something about that (more on that in the next session), but we can also add some summary statistics in the form of a boxplot. We can simply add a layer to the plot that displays the boxes.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = sex, y = hindfoot_length)) +\n  geom_point() +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![Scatterplot and boxplot of hindfoot length for each sex.](da2-04-plotting_files/figure-html/fig-sex_hind_scatter_box-5.png){#fig-sex_hind_scatter_box width=672}\n:::\n:::\n\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(data = surveys,\n        mapping = aes(x = \"sex\", y = \"hindfoot_length\")) +\n        geom_point() +\n        geom_boxplot())\n\np.show()\n```\n\n::: {.cell-output-display}\n![Scatterplot and boxplot of hindfoot length for each sex.](da2-04-plotting_files/figure-html/fig-sex_hind_scatter_box_py-1.png){#fig-sex_hind_scatter_box_py width=614}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport sys, warnings\nprint(sys.version)\n```\n\n```{.python .cell-code}\nprint(warnings.__file__)\n```\n\n```{.python .cell-code}\nhelp(warnings.warn)\n```\n\n```{.python .cell-code}\n# boxplot first\nsns.boxplot(\n    data = surveys,\n    x = \"sex\",\n    y = \"hindfoot_length\",\n    showfliers = False  # hide outliers, since we’ll show raw points\n)\n\n# points overlaid\nsns.stripplot(\n    data = surveys,\n    x = \"sex\",\n    y = \"hindfoot_length\",\n    color = \"black\",  # colour points for contrast\n    jitter = True,    # add jitter to avoid overlap\n    alpha = 0.6       # use transparency for clarity\n)\n\nplt.title(\"Hindfoot length by sex (points + boxplot)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Scatterplot and boxplot of hindfoot length for each sex.](da2-04-plotting_files/figure-html/fig-sex_hind_scatter_box_seaborn-3.png){#fig-sex_hind_scatter_box_seaborn width=672}\n:::\n:::\n\n\n:::\n:::\n\nThe layers are added in the order we provide them, so here the boxes are on top of the individual data points. You might want to rearrange that, so that the boxes are *behind* the data.\n\n## Changing plots\n\nOften we want to control other parts of the plot as well. There is a whole range of things we can change about the appearance of a plot - in fact, *anything* in a plot can be changed! Don't try to remember every tiny detail. You might want to change the orientation of the text labels on the x-axis, but a quick search is probably easier than keeping that information in your head!\n\n### Colour\n\nChanging colour is pretty straightforward. We use the `colour =` argument. There are a whole range of default colours available, but we'll go with blue here.\n\nLet's illustrate that using our original `weight` vs `hindfoot_length` scatter plot.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point(colour = \"blue\")\n```\n\n::: {.cell-output-display}\n![Colouring points by a defined colour.](da2-04-plotting_files/figure-html/fig-weight_hind_scatter_blue-5.png){#fig-weight_hind_scatter_blue width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(data = surveys,\n        mapping = aes(x = \"weight\", y = \"hindfoot_length\")) +\n        geom_point(colour = \"blue\"))\n\np.show()\n```\n\n::: {.cell-output-display}\n![Colouring points by a defined colour.](da2-04-plotting_files/figure-html/fig-weight_hind_scatter_blue_py-1.png){#fig-weight_hind_scatter_blue_py width=614}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.scatterplot(\n    data = surveys,\n    x = \"weight\",\n    y = \"hindfoot_length\",\n    color = \"blue\"   # fixed color for all points\n)\n\nplt.title(\"Scatterplot of weight vs hindfoot_length (blue points)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Colouring points by a defined colour.](da2-04-plotting_files/figure-html/fig-weight_hind_scatter_blue_seaborn-3.png){#fig-weight_hind_scatter_blue_seaborn width=672}\n:::\n:::\n\n\n:::\n\n:::\n\n### Fill\n\nThe `fill =` argument is used to *fill* surface areas. It doesn't work on individual points, but instead on geometries that have an area, such as a boxplot, bar chart or violin plot.\n\nWe can't create a boxplot with two continuous variables, so we'll plot `hindfoot_length` for the different `sex` groups again. We fill the boxes using magenta.\n\n**What happens if you use `colour = \"magenta\"` instead?**\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = sex, y = hindfoot_length)) +\n  geom_boxplot(fill = \"magenta\")\n```\n\n::: {.cell-output-display}\n![Geometries with surfaces use `fill` for colours.](da2-04-plotting_files/figure-html/fig-sex_hind_boxplot_fill-5.png){#fig-sex_hind_boxplot_fill width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(data = surveys,\n        mapping = aes(x = \"sex\", y = \"hindfoot_length\")) +\n        geom_boxplot(fill = \"magenta\"))\n\np.show()\n```\n\n::: {.cell-output-display}\n![Geometries with surfaces use `fill` for colours.](da2-04-plotting_files/figure-html/fig-sex_hind_boxplot_fill_py-1.png){#fig-sex_hind_boxplot_fill_py width=614}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.boxplot(\n    data = surveys,\n    x = \"sex\",\n    y = \"hindfoot_length\",\n    color = \"magenta\"   # sets the fill color of the box\n)\n\nplt.title(\"Hindfoot length by sex (magenta boxplot)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Seaborn uses `color` for fill colours.](da2-04-plotting_files/figure-html/fig-sex_hind_boxplot_fill_seaborn-3.png){#fig-sex_hind_boxplot_fill_seaborn width=672}\n:::\n:::\n\n\n:::\n:::\n\n### Aesthetics based on data\n\nManually assigning colours can be very helpful, but quite often we want to colour data based on *another variable*. For example, we might be interested in the potential relationship between weight and hindfoot length, but are wondering if this looks different across the sex groups.\n\nIn that case, we'd want to colour all the data points belonging to the male group different to those of the female group. The same goes for the missing values.\n\nThe way we can do this is by adding the `sex` variable *inside* the aesthetics.\n\n::: {.callout-note}\n## Within `aes()` or not?\n\nAn easy way of remembering where your `colour =` or `fill =` argument goes is to ask: is the colour based on the data or not? If the answer is yes, it goes *inside* the aesthetics. If not, then outside.\n\n:::\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = weight, y = hindfoot_length, colour = sex)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Colouring data based on another variable.](da2-04-plotting_files/figure-html/fig-weight_hind_fill_sex-5.png){#fig-weight_hind_fill_sex width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(data = surveys,\n        mapping = aes(x = \"weight\", y = \"hindfoot_length\", colour = \"sex\")) +\n        geom_point())\n\np.show()\n```\n\n::: {.cell-output-display}\n![Colouring data based on another variable.](da2-04-plotting_files/figure-html/fig-weight_hind_fill_sex_py-1.png){#fig-weight_hind_fill_sex_py width=614}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.scatterplot(\n    data = surveys,\n    x = \"weight\",\n    y = \"hindfoot_length\",\n    hue = \"sex\"   # map colors to sex\n)\n\nplt.title(\"Scatterplot of weight vs hindfoot_length by sex\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Colouring data based on another variable.](da2-04-plotting_files/figure-html/fig-weight_hind_fill_sex_seaborn-3.png){#fig-weight_hind_fill_sex_seaborn width=672}\n:::\n:::\n\n\n:::\n\n:::\n\n### Dealing with overlap\n\nIn the example of hindfoot length for the different sex groups we noticed that there is quite a bit of overlap in the data. One of the ways of dealing with this is by adding a little bit of *jitter*. What that does is add a tiny bit of random noise to the data, to avoid overlap.\n\nWe can do this with the `geom_jitter()` geometry. The amount of jitter that is added can be regulated with the `width =` argument, as a fraction of the available width. Compare the differences in the following plots.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = sex, y = hindfoot_length)) +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![Adding jitter to the data can help with overlapping data.](da2-04-plotting_files/figure-html/fig-avoiding_overlap_jitter-5.png){#fig-avoiding_overlap_jitter width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = sex, y = hindfoot_length)) +\n  geom_jitter(width = 0.1)\n```\n\n::: {.cell-output-display}\n![You can control the amount of jitter.](da2-04-plotting_files/figure-html/fig-avoiding_overlap_jitter_width-1.png){#fig-avoiding_overlap_jitter_width width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(data = surveys,\n        mapping = aes(x = \"sex\", y = \"hindfoot_length\")) +\n        geom_jitter())\n\np.show()\n```\n\n::: {.cell-output-display}\n![Adding jitter to the data can help with overlapping data.](da2-04-plotting_files/figure-html/fig-avoiding_overlap_jitter_py-1.png){#fig-avoiding_overlap_jitter_py width=614}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(data = surveys,\n        mapping = aes(x = \"sex\", y = \"hindfoot_length\")) +\n        geom_jitter(width = 0.1))\n\np.show()\n```\n\n::: {.cell-output-display}\n![You can control the amount of jitter.](da2-04-plotting_files/figure-html/fig-avoiding_overlap_jitter_width_py-3.png){#fig-avoiding_overlap_jitter_width_py width=614}\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.stripplot(\n    data = surveys,\n    x = \"sex\",\n    y = \"hindfoot_length\",\n    jitter = True,    # add horizontal jitter\n    alpha = 0.6       # add transparency\n)\n\nplt.title(\"Hindfoot length by sex (jittered points)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Adding jitter to the data can help with overlapping data.](da2-04-plotting_files/figure-html/fig-avoiding_overlap_jitter_seaborn-5.png){#fig-avoiding_overlap_jitter_seaborn width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.stripplot(\n    data = surveys,\n    x = \"sex\",\n    y = \"hindfoot_length\",\n    jitter = 0.05,   # controls the amount of horizontal jitter\n    alpha = 0.6     # add transparency\n)\n\nplt.title(\"Hindfoot length by sex (jitter = 0.05)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![You can control the amount of jitter.](da2-04-plotting_files/figure-html/fig-avoiding_overlap_jitter_width_seaborn-7.png){#fig-avoiding_overlap_jitter_width_seaborn width=672}\n:::\n:::\n\n:::\n\n### Transparency\n\nEven with jittering the data, we still have quite some overlap. There probably is a limit to what we can do about it, but adding some transparency can also help. Here, where there is more overlap, areas will appear darker whereas less overlap will appear lighter.\n\nWe control this with the `alpha =` argument. Again, this takes a value between 0 (full transparency) and 1 (no transparency).\n\nCompare the following plot with the previous ones.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = sex, y = hindfoot_length)) +\n  geom_jitter(width = 0.1, alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![You can also use transparency to deal with overlapping data.](da2-04-plotting_files/figure-html/fig-avoiding_overlap_jitter_alpha-9.png){#fig-avoiding_overlap_jitter_alpha width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(data = surveys,\n        mapping = aes(x = \"sex\", y = \"hindfoot_length\")) +\n        geom_jitter(width = 0.1, alpha = 0.4))\n\np.show()\n```\n\n::: {.cell-output-display}\n![You can also use transparency to deal with overlapping data.](da2-04-plotting_files/figure-html/fig-avoiding_overlap_jitter_alpha_py-1.png){#fig-avoiding_overlap_jitter_alpha_py width=614}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.stripplot(\n    data = surveys,\n    x = \"sex\",\n    y = \"hindfoot_length\",\n    jitter = 0.1,     # horizontal jitter\n    alpha = 0.4       # transparency of 40%\n)\n\nplt.title(\"Hindfoot length by sex (jitter=0.1, alpha=0.4)\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![You can also use transparency to deal with overlapping data.](da2-04-plotting_files/figure-html/fig-avoiding_overlap_jitter_alpha_seaborn-3.png){#fig-avoiding_overlap_jitter_alpha_seaborn width=672}\n:::\n:::\n\n\n:::\n:::\n\n### Point size and line width\n\nThe `size =` argument is used to control the size of points, whereas the `linewidth =` argument is used to specify line thickness. Look at the following examples.\n\nIn the next two panels we're using `geom_point()` with different sizes.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point(size = 1) +\n  labs(title = \"geom_point(size = 1)\")\n```\n\n::: {.cell-output-display}\n![Data point sizes can be adjusted.](da2-04-plotting_files/figure-html/fig-controlling_sizes1-5.png){#fig-controlling_sizes1 width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point(size = 3) +\n  labs(title = \"geom_point(size = 3)\")\n```\n\n::: {.cell-output-display}\n![Data point sizes can be adjusted.](da2-04-plotting_files/figure-html/fig-controlling_sizes2-1.png){#fig-controlling_sizes2 width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(surveys, aes(x = \"weight\", y = \"hindfoot_length\")) +\n      geom_point(size = 1) +\n      labs(title = \"geom_point(size = 1)\"))\n      \np.show()\n```\n\n::: {.cell-output-display}\n![Data point sizes can be adjusted.](da2-04-plotting_files/figure-html/fig-controlling_sizes_py1-1.png){#fig-controlling_sizes_py1 width=614}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(surveys, aes(x = \"weight\", y = \"hindfoot_length\")) +\n      geom_point(size = 3) +\n      labs(title = \"geom_point(size = 3)\"))\n      \np.show()\n```\n\n::: {.cell-output-display}\n![Data point sizes can be adjusted.](da2-04-plotting_files/figure-html/fig-controlling_sizes_py2-3.png){#fig-controlling_sizes_py2 width=614}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig, axes = plt.subplots(1, 2, figsize = (12, 5), sharey = True)\n\n# p1: small points\nsns.scatterplot(\n    data = surveys,\n    x = \"weight\",\n    y = \"hindfoot_length\",\n    s = 20,             # size of points (similar to size=1 in ggplot)\n    ax = axes[0]\n)\naxes[0].set_title(\"point size 20\")\n\n# p2: larger points\nsns.scatterplot(\n    data = surveys,\n    x = \"weight\",\n    y = \"hindfoot_length\",\n    s = 70,             # larger points (similar to size=3 in ggplot)\n    ax = axes[1]\n)\naxes[1].set_title(\"point size 70\")\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output-display}\n![Data point sizes can be adjusted.](da2-04-plotting_files/figure-html/fig-controlling_sizes_seaborn-5.png){#fig-controlling_sizes_seaborn width=1152}\n:::\n:::\n\n\n:::\n:::\n\nTo illustrate the change in line width, we're using a line across the data.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nTo achieve this, we use a different geometry: `geom_smooth()`. The width of the line can be changed with the `linewidth =` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point() +\n  geom_smooth(linewidth = 1) +\n  labs(title = \"geom_smooth(linewidth = 1)\")\n```\n\n::: {.cell-output-display}\n![Line sizes can also be adjusted.](da2-04-plotting_files/figure-html/fig-controlling_linesize1-7.png){#fig-controlling_linesize1 width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point() +\n  geom_smooth(linewidth = 3) +\n  labs(title = \"geom_smooth(linewidth = 3)\")\n```\n\n::: {.cell-output-display}\n![Line sizes can also be adjusted.](da2-04-plotting_files/figure-html/fig-controlling_linesize2-1.png){#fig-controlling_linesize2 width=672}\n:::\n:::\n\n\n## Python\n\nTo achieve this, we use a different geometry: `geom_smooth()`. The width of the line can be changed with the `size =` argument.\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(surveys, aes(x = \"weight\", y = \"hindfoot_length\")) +\n      geom_point() +\n      geom_smooth(size = 1, colour = \"blue\") +\n      labs(title = \"size = 1\"))\n      \np.show()\n```\n\n::: {.cell-output-display}\n![Data point sizes can be adjusted.](da2-04-plotting_files/figure-html/fig-controlling_sizes_py3-1.png){#fig-controlling_sizes_py3 width=614}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(surveys, aes(x = \"weight\", y = \"hindfoot_length\")) +\n      geom_point() +\n      geom_smooth(size = 3, colour = \"blue\") +\n      labs(title = \"size = 3\"))\n      \np.show()\n```\n\n::: {.cell-output-display}\n![Data point sizes can be adjusted.](da2-04-plotting_files/figure-html/fig-controlling_sizes_py4-3.png){#fig-controlling_sizes_py4 width=614}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.regplot(\n    data = surveys,\n    x = \"weight\",\n    y = \"hindfoot_length\",\n    scatter = True,\n    color = \"black\",\n    scatter_kws = {'s': 20},                      # point size\n    line_kws = {'color': 'blue', 'linewidth': 1}  # smooth line style\n)\n\nplt.title(\"size = 1\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Line sizes can also be adjusted.](da2-04-plotting_files/figure-html/fig-controlling_linesize_seaborn1-5.png){#fig-controlling_linesize_seaborn1 width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.regplot(\n    data = surveys,\n    x = \"weight\",\n    y = \"hindfoot_length\",\n    scatter = True,\n    color = \"black\",\n    scatter_kws = {'s': 20},                      # point size\n    line_kws = {'color': 'blue', 'linewidth': 3}  # smooth line style\n)\n\nplt.title(\"size = 3\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![Line sizes can also be adjusted.](da2-04-plotting_files/figure-html/fig-controlling_linesize_seaborn2-7.png){#fig-controlling_linesize_seaborn2 width=672}\n:::\n:::\n\n\n:::\n:::\n\n::: {.callout-important}\n### Note on `geom_smooth()` in R vs Python\n\nWhen comparing **R** and **Python**, you may notice that the smooth line drawn by `geom_smooth()` looks different between **ggplot2** and **plotnine** (or **seaborn**).\n\n- In **R/ggplot2**, the default smoother is **LOESS** (*Locally Estimated Scatterplot Smoothing*).  \n- In **Python/plotnine**, the default is a **linear regression** (`method = \"lm\"`).  \n- In **Python/seaborn**, the default is also a **linear regression**, just like plotnine.\n\nThis is why the default smooth lines look different, even though the function name is the same.\n:::\n\n## Facets\n\nPlots can split into multiple panels using *faceting*. This is a very useful tool to quickly see data distributions across different groups. We can split them into two types:\n\n1. `facet_wrap()` arranges a one-dimensional sequence of panels (based on a single splitting variable) to fit on one page\n2. `facet_grid()` allows you to form a matrix of rows and columns of panels (based on two different variables)\n\nThis is best illustrated with an example. Let's say we want to split the weight vs hindfoot length scatter plot by the different sex groups, where the data belonging to each group has its own sub-panel. We can do this as follows.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point() +\n  facet_wrap(facets = vars(sex))\n```\n\n::: {.cell-output-display}\n![Facetting data splits it into mini-panels.](da2-04-plotting_files/figure-html/fig-facetting-9.png){#fig-facetting width=672}\n:::\n:::\n\n\nNote the added code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfacet_wrap(facets = vars(sex))\n```\n:::\n\n\nWe used `facet_wrap()`, because we're only splitting the data by a single variable: `sex`. We also need to tell the function which variable to split by, which we do in the `facets =` argument. Annoyingly - and for reasons unbeknownst to me - this requires the use of a *helper function*, `vars()`.\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(surveys, aes(x = \"weight\", y = \"hindfoot_length\")) +\n        geom_point() +\n        facet_wrap(\"~ sex\"))\n\np.show()\n```\n\n::: {.cell-output-display}\n![Facetting data splits it into mini-panels.](da2-04-plotting_files/figure-html/fig-facetting_py-1.png){#fig-facetting_py width=614}\n:::\n:::\n\n\nNote the added code:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfacet_wrap(\"~ sex\")\n```\n:::\n\n\nWe used `facet_wrap()`, because we're only splitting the data by a single variable: `sex`. We also need to tell the function which variable to split by, which we do by using the `~` symbol. I completely agree that this is a weird notation. Just read it as *split by...*\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Using relplot (shorthand for FacetGrid + scatterplot)\np = sns.relplot(\n    data = surveys,\n    x = \"weight\",\n    y = \"hindfoot_length\",\n    col = \"sex\",           # facet by sex\n    kind = \"scatter\"       # scatterplot\n)\n\nplt.show()\n```\n\n::: {.cell-output-display}\n![Facetting data splits it into mini-panels.](da2-04-plotting_files/figure-html/fig-facetting_seaborn-3.png){#fig-facetting_seaborn width=960}\n:::\n:::\n\n\n:::\n\n:::\n\nIn the end, our data is split into three sub-panels - one for each group (if missing values are included). This makes it easy to see trends across the groups. Or, in this case, that there doesn't seem to be much difference in the distribution across the female and male observations.\n\nLastly, we can also split by two variables.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point() +\n  facet_grid(rows = vars(plot_id), cols = vars(sex))\n```\n\n::: {.cell-output-display}\n![Splitting into rows and columns.](da2-04-plotting_files/figure-html/fig-facetgrid-5.png){#fig-facetgrid width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(surveys, aes(x = \"weight\", y = \"hindfoot_length\")) +\n        geom_point() +\n        facet_grid(\"plot_id ~ sex\"))\n\np.show()\n```\n\n::: {.cell-output-display}\n![Splitting into rows and columns.](da2-04-plotting_files/figure-html/fig-facetgrid_py-1.png){#fig-facetgrid_py width=614}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Using relplot (shorthand for FacetGrid + scatterplot)\np = sns.relplot(\n    data = surveys,\n    x = \"weight\",\n    y = \"hindfoot_length\",\n    col = \"sex\",           # facet by sex\n    row = \"plot_id\",\n    kind = \"scatter\"       # scatterplot\n)\n\nplt.show()\n```\n\n::: {.cell-output-display}\n![Splitting into rows and columns.](da2-04-plotting_files/figure-html/fig-facetgrid_seaborn-3.png){#fig-facetgrid_seaborn width=960}\n:::\n:::\n\n\n:::\n\n:::\n\nTruly a terrible plot, because there are far too many groups in `plot_id`! We'll see how to deal with this in later chapters.\n\n## Saving plots\n\nSometimes you might want to save a plot you created. This is pretty straightforward. Here, we are assuming that you have an `images` subfolder in your working directory.\n\nWe save a plot in two steps:\n\n1. Assign the plot to an object\n2. Then use `ggsave()` to save this object\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_r <- ggplot(data = surveys,\n       mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point() +\n  facet_wrap(facets = vars(sex))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"images/weight_vs_hindfootlength.png\",\n       plot = plot_r,\n       width = 7,\n       height = 5,\n       units = \"in\")\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplot_python = (ggplot(surveys, aes(x = \"weight\", y = \"hindfoot_length\")) +\n        geom_point() +\n        facet_wrap(\"~ sex\"))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggsave(plot_python,\n        filename = \"images/weight_vs_hindfootlength.png\",\n        units = \"in\",\n        width = 7,\n        height = 5,\n        dpi = 300))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n/Users/martinvanrongen/miniforge3/envs/mv372/lib/python3.13/site-packages/plotnine/ggplot.py:630: PlotnineWarning: Saving 7 x 5 in image.\n/Users/martinvanrongen/miniforge3/envs/mv372/lib/python3.13/site-packages/plotnine/ggplot.py:631: PlotnineWarning: Filename: images/weight_vs_hindfootlength.png\n/Users/martinvanrongen/miniforge3/envs/mv372/lib/python3.13/site-packages/plotnine/layer.py:372: PlotnineWarning: geom_point : Removed 4811 rows containing missing values.\n```\n\n\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Seaborn equivalent\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Create faceted scatterplot\nplot_seaborn = sns.relplot(\n    data = surveys,\n    x = \"weight\",\n    y = \"hindfoot_length\",\n    col = \"sex\",\n    kind = \"scatter\"\n)\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplot_seaborn.savefig(\"images/weight_vs_hindfootlength_sns.png\", dpi = 300, bbox_inches = \"tight\")\n```\n:::\n\n\n:::\n:::\n\nHere, I've added a few extra arguments to demonstrate what you can change. The only two things that are required are (1) the plot you want to save and (2) the name of the plot, including the filename extension.\n\nThe other arguments, such as `units =`, `width =` and `height =` are used to define the units size (inches in this case) and corresponding width/height values. It's a good idea to add the `dpi =` argument (dots-per-inch) to specify the resolution, particularly when there are minimum resolution requirements when publishing!\n\n## Exercises\n\n### Plot colours: `parasites` {#sec-exr_plotcol_parasites}\n\n::: {.callout-exercise #ex-plotcol_parasites}\n#### Plot colours\n\n{{< level 1 >}}\n\nFor this exercise we'll revisit the data from `data/parasites.csv`. We'll use the data to practise changing colours. After loading the data, do the following:\n\nCreate the plot: create a violin plot for `fish_length` and colour by `lake` - include the data points, avoiding overlap.\n\n::: {.callout-answer collapse=\"true\"}\n\nFirst we load the data.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparasites <- read_csv(\"data/parasites.csv\")\n```\n:::\n\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nparasites = pd.read_csv(\"data/parasites.csv\")\n```\n:::\n\n\n:::\n\nNow we can create the plot. We are creating a violin plot and colouring by `lake`. We're also asked to include the data points and to avoid overlap.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can use `geom_violin()` to create a violin plot. We use the `aes()` to assign a colour (`fill =` because we're colouring a surface area) to our data. \n\nAdding the data points could be done with `geom_point()` but then we'd end up with quite a bit of overlap. We could fix this using transparency (`alpha =`) but that would probably only solve part of the issue. We're better off using `geom_jitter()`, where we add a tiny bit of noise to the data to avoid overlap. We can set the width of this to make sure the jittered points are not too visually overbearing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(parasites, aes(x = lake, y = fish_length)) +\n  geom_violin(aes(fill = lake)) +\n  geom_jitter(width = 0.05)\n```\n\n::: {.cell-output-display}\n![](da2-04-plotting_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## Python\n\nIn `plotnine` we can use `geom_violin()` to create a violin plot. We use the `aes()` to assign a colour (`fill =` because we're colouring a surface area) to our data. \n\nAdding the data points could be done with `geom_point()` but then we'd end up with quite a bit of overlap. We could fix this using transparency (`alpha =`) but that would probably only solve part of the issue. We're better off using `geom_jitter()`, where we add a tiny bit of noise to the data to avoid overlap. We can set the width of this to make sure the jittered points are not too visually overbearing.\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(parasites, aes(x = \"lake\", y = \"fish_length\")) +\n  geom_violin(aes(fill = \"lake\")) +\n  geom_jitter(width = 0.05))\n  \np.show()\n```\n\n::: {.cell-output-display}\n![](da2-04-plotting_files/figure-html/unnamed-chunk-15-1.png){width=614}\n:::\n:::\n\n\n:::\n\n:::\n:::\n\n### Facetting plots: `parasites` {#sec-exr_facets}\n\n::: {.callout-exercise #ex-title}\n#### Facetting plots\n\n{{< level 1 >}}\n\nFor this exercise we'll again use the data from `data/parasites.csv`.\n\nTo practice creating sub panels using facetting, you'll be plotting `fish_length` against `parasite_count` for each `lake`.\n\nWhich lake has the highest parasite count?\n\n::: {.callout-answer collapse=\"true\"}\nWe'll assume you still have the data loaded.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(parasites, aes(x = fish_length, y = parasite_count)) +\n  geom_point() +\n  facet_wrap(facets = vars(lake))\n```\n\n::: {.cell-output-display}\n![](da2-04-plotting_files/figure-html/unnamed-chunk-16-3.png){width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(parasites, aes(x = \"fish_length\", y = \"parasite_count\")) +\n  geom_point() +\n  facet_wrap(\"lake\"))\n\np.show()\n```\n\n::: {.cell-output-display}\n![](da2-04-plotting_files/figure-html/unnamed-chunk-17-1.png){width=614}\n:::\n:::\n\n:::\n\nLake `C` has the highest parasite count (over 225).\n\n:::\n:::\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- We can build up plots layer-by-layer, adding multiple geometries in a single plot\n- Plot aesthetics can be changed based on data or manually defined\n- Colour, fill, transparency and jittering can all be useful ways to improve clarity\n- Plots can be subdivided into panels, called *facets*, which are based on a variable within the data. This allows easy visual comparison across groups.\n- We use functions like `ggsave()` to export plots to file\n:::\n",
    "supporting": [
      "da2-04-plotting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}