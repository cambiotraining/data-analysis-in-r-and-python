{
  "hash": "cc53f1c328edbd7f6d05503bffd68834",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Live demo exercises\"\n---\n\n## Section setup\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\n# If using seaborn for plotting\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n:::\n\n## DA1: Getting started\n\n## DA2: Data & plotting\n\n### Live demo: exploring `infections`\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nRead in the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfections <- read_csv(\"data/infections.csv\")\n```\n:::\n\n\nAnd have a look:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(infections)\n```\n:::\n\n\n\n## Python\n\nRead in the data:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections = pd.read_csv(\"data/infections.csv\")\n```\n:::\n\n\nAnd have a look:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.head()\n```\n:::\n\n\n:::\n\n#### Data structure\n\nNumber of rows & columns:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(infections)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(infections)\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.shape[0]\n```\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.shape[1]\n```\n:::\n\n\n\n:::\n\nIt's good to look at the column attributes: what type of columns are we dealing with and is it what we expect?\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(infections)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(infections)\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.describe()\n```\n:::\n\n\n:::\n\n#### Quality control checks\n\nIt's good to do some basic sanity / quality control checks. For example, if there are different categories in a column, do all the categories we expect show up or are there missing ones / misspelled etc.?\n\nFor example, we can check the unique values in a column:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(infections$infection_type)\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections[\"infection_type\"].unique()\n```\n:::\n\n\n:::\n\nWe can count the number of missing values in the column `infection_type`.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nYou read the code \"inside-out\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(infections$infection_type))\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections[\"infection_type\"].isna().sum()\n```\n:::\n\n\n:::\n\n### Live demo: subsetting `infections`\n\nLet's select `patient_id`:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfections$patient_id\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.patient_id\n```\n:::\n\n\n:::\n\nOr more than 1 column, by column name:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfections[, c(\"patient_id\", \"systolic_pressure\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,400 × 2\n   patient_id systolic_pressure\n   <chr>                  <dbl>\n 1 ID_0001                  117\n 2 ID_0002                  115\n 3 ID_0003                  120\n 4 ID_0004                  129\n 5 ID_0005                  114\n 6 ID_0006                  124\n 7 ID_0007                  133\n 8 ID_0008                  120\n 9 ID_0009                  124\n10 ID_0010                  127\n# ℹ 1,390 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections[[\"patient_id\", \"systolic_pressure\"]]\n```\n:::\n\n\n:::\n\nCombine this with selecting only a subset of rows, let's say the first three rows.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfections[1:3, c(\"patient_id\", \"systolic_pressure\")]\n```\n:::\n\n\n## Python\n\nWe need to be aware of the zero-based indexing, also noting that the value after the `:` is *not* included:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections[[\"patient_id\", \"systolic_pressure\"]].iloc[0:3]\n```\n:::\n\n\n:::\n\n## DA3: Manipulating data\n\n## DA4: Organise and combine\n\n",
    "supporting": [
      "trainers-live-demo_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}