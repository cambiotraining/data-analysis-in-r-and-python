{
  "hash": "f677b3d8bd4fa779c4683fc6a92ab40d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Live demo exercises\"\n---\n\n## Section setup\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\n# If using seaborn for plotting\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n:::\n\n## DA1: Getting started\n\n## DA2: Data & plotting\n\n### Live demo: exploring `infections`\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nRead in the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfections <- read_csv(\"data/infections.csv\")\n```\n:::\n\n\nAnd have a look:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(infections)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  patient_id hospital   quarter infection_type vaccination_status age_group\n  <chr>      <chr>      <chr>   <chr>          <chr>              <chr>    \n1 ID_0001    hospital_3 Q2      none           <NA>               65+      \n2 ID_0002    hospital_3 Q2      viral          <NA>               18 - 64  \n3 ID_0003    hospital_2 Q2      none           unknown            65+      \n4 ID_0004    hospital_2 Q3      fungal         unvaccinated       < 18     \n5 ID_0005    hospital_3 Q2      fungal         vaccinated         65+      \n6 ID_0006    hospital_5 Q3      none           vaccinated         65+      \n# ℹ 5 more variables: icu_admission <lgl>, symptoms_count <dbl>,\n#   systolic_pressure <dbl>, body_temperature <dbl>, crp_level <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Python\n\nRead in the data:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections = pd.read_csv(\"data/infections.csv\")\n```\n:::\n\n\nAnd have a look:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  patient_id    hospital  ... body_temperature crp_level\n0    ID_0001  hospital_3  ...             37.8     12.05\n1    ID_0002  hospital_3  ...             39.1      8.11\n2    ID_0003  hospital_2  ...             38.5      5.24\n3    ID_0004  hospital_2  ...             39.4     41.73\n4    ID_0005  hospital_3  ...             36.9     10.51\n\n[5 rows x 11 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n#### Data structure\n\nNumber of rows & columns:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(infections)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1400\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(infections)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11\n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.shape[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1400\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.shape[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n11\n```\n\n\n:::\n:::\n\n\n\n:::\n\nIt's good to look at the column attributes: what type of columns are we dealing with and is it what we expect?\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(infections)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  patient_id          hospital           quarter          infection_type    \n Length:1400        Length:1400        Length:1400        Length:1400       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n vaccination_status  age_group         icu_admission   symptoms_count  \n Length:1400        Length:1400        Mode :logical   Min.   : 0.000  \n Class :character   Class :character   FALSE:814       1st Qu.: 6.000  \n Mode  :character   Mode  :character   TRUE :513       Median : 9.000  \n                                       NA's :73        Mean   : 8.549  \n                                                       3rd Qu.:11.000  \n                                                       Max.   :21.000  \n                                                       NA's   :67      \n systolic_pressure body_temperature   crp_level     \n Min.   : 87.0     Min.   :36.30    Min.   : 1.000  \n 1st Qu.:118.0     1st Qu.:38.20    1st Qu.: 9.117  \n Median :125.0     Median :38.80    Median :16.215  \n Mean   :125.1     Mean   :38.75    Mean   :19.465  \n 3rd Qu.:132.0     3rd Qu.:39.40    3rd Qu.:26.433  \n Max.   :163.0     Max.   :41.50    Max.   :58.860  \n NA's   :74        NA's   :67       NA's   :156     \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(infections)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [1,400 × 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ patient_id        : chr [1:1400] \"ID_0001\" \"ID_0002\" \"ID_0003\" \"ID_0004\" ...\n $ hospital          : chr [1:1400] \"hospital_3\" \"hospital_3\" \"hospital_2\" \"hospital_2\" ...\n $ quarter           : chr [1:1400] \"Q2\" \"Q2\" \"Q2\" \"Q3\" ...\n $ infection_type    : chr [1:1400] \"none\" \"viral\" \"none\" \"fungal\" ...\n $ vaccination_status: chr [1:1400] NA NA \"unknown\" \"unvaccinated\" ...\n $ age_group         : chr [1:1400] \"65+\" \"18 - 64\" \"65+\" \"< 18\" ...\n $ icu_admission     : logi [1:1400] FALSE FALSE TRUE TRUE TRUE FALSE ...\n $ symptoms_count    : num [1:1400] 1 6 3 7 7 5 10 12 13 7 ...\n $ systolic_pressure : num [1:1400] 117 115 120 129 114 124 133 120 124 127 ...\n $ body_temperature  : num [1:1400] 37.8 39.1 38.5 39.4 36.9 36.8 39.4 39.3 39.6 39.1 ...\n $ crp_level         : num [1:1400] 12.05 8.11 5.24 41.73 10.51 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   patient_id = col_character(),\n  ..   hospital = col_character(),\n  ..   quarter = col_character(),\n  ..   infection_type = col_character(),\n  ..   vaccination_status = col_character(),\n  ..   age_group = col_character(),\n  ..   icu_admission = col_logical(),\n  ..   symptoms_count = col_double(),\n  ..   systolic_pressure = col_double(),\n  ..   body_temperature = col_double(),\n  ..   crp_level = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       symptoms_count  systolic_pressure  body_temperature    crp_level\ncount     1333.000000        1326.000000       1333.000000  1244.000000\nmean         8.549137         125.070136         38.751988    19.464751\nstd          3.825004          10.346761          0.883689    13.083907\nmin          0.000000          87.000000         36.300000     1.000000\n25%          6.000000         118.000000         38.200000     9.117500\n50%          9.000000         125.000000         38.800000    16.215000\n75%         11.000000         132.000000         39.400000    26.432500\nmax         21.000000         163.000000         41.500000    58.860000\n```\n\n\n:::\n:::\n\n\n:::\n\n#### Quality control checks\n\nIt's good to do some basic sanity / quality control checks. For example, if there are different categories in a column, do all the categories we expect show up or are there missing ones / misspelled etc.?\n\nFor example, we can check the unique values in a column:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(infections$infection_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"none\"      \"viral\"     \"fungal\"    NA          \"bacterial\"\n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections[\"infection_type\"].unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray(['none', 'viral', 'fungal', nan, 'bacterial'], dtype=object)\n```\n\n\n:::\n:::\n\n\n:::\n\nWe can count the number of missing values in the column `infection_type`.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nYou read the code \"inside-out\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(infections$infection_type))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 74\n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections[\"infection_type\"].isna().sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n74\n```\n\n\n:::\n:::\n\n\n:::\n\n### Live demo: subsetting `infections`\n\nLet's select `patient_id`:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfections$patient_id\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections.patient_id\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0       ID_0001\n1       ID_0002\n2       ID_0003\n3       ID_0004\n4       ID_0005\n         ...   \n1395    ID_1396\n1396    ID_1397\n1397    ID_1398\n1398    ID_1399\n1399    ID_1400\nName: patient_id, Length: 1400, dtype: object\n```\n\n\n:::\n:::\n\n\n:::\n\nOr more than 1 column, by column name:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfections[, c(\"patient_id\", \"systolic_pressure\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,400 × 2\n   patient_id systolic_pressure\n   <chr>                  <dbl>\n 1 ID_0001                  117\n 2 ID_0002                  115\n 3 ID_0003                  120\n 4 ID_0004                  129\n 5 ID_0005                  114\n 6 ID_0006                  124\n 7 ID_0007                  133\n 8 ID_0008                  120\n 9 ID_0009                  124\n10 ID_0010                  127\n# ℹ 1,390 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections[[\"patient_id\", \"systolic_pressure\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     patient_id  systolic_pressure\n0       ID_0001              117.0\n1       ID_0002              115.0\n2       ID_0003              120.0\n3       ID_0004              129.0\n4       ID_0005              114.0\n...         ...                ...\n1395    ID_1396              118.0\n1396    ID_1397              117.0\n1397    ID_1398              137.0\n1398    ID_1399              135.0\n1399    ID_1400              129.0\n\n[1400 rows x 2 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\nCombine this with selecting only a subset of rows, let's say the first three rows.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfections[1:3, c(\"patient_id\", \"systolic_pressure\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  patient_id systolic_pressure\n  <chr>                  <dbl>\n1 ID_0001                  117\n2 ID_0002                  115\n3 ID_0003                  120\n```\n\n\n:::\n:::\n\n\n## Python\n\nWe need to be aware of the zero-based indexing, also noting that the value after the `:` is *not* included:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfections[[\"patient_id\", \"systolic_pressure\"]].iloc[0:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  patient_id  systolic_pressure\n0    ID_0001              117.0\n1    ID_0002              115.0\n2    ID_0003              120.0\n```\n\n\n:::\n:::\n\n\n:::\n\n### Live demo: simple plot `infections`\n\nLet's start with a simple scatterplot, where we plot `body_temperature` on the x-axis and `crp_level` on the y-axis.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(infections, aes(x = body_temperature, y = crp_level)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 215 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](trainers-live-demo_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(infections, aes(x = \"body_temperature\", y = \"crp_level\")) +\n  geom_point())\n  \np.show()\n```\n\n::: {.cell-output-display}\n![](trainers-live-demo_files/figure-html/unnamed-chunk-25-1.png){width=614}\n:::\n:::\n\n\n:::\n\nWe can explore this a bit further. For example, we can colour the points based on the `hospital` variable, to see if there are any patterns across the different hospitals:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(infections, aes(x = body_temperature, y = crp_level,\n                       colour = hospital)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 215 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](trainers-live-demo_files/figure-html/unnamed-chunk-26-3.png){width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(infections, aes(x = \"body_temperature\", y = \"crp_level\",\n                            colour = \"hospital\")) +\n  geom_point())\n  \np.show()\n```\n\n::: {.cell-output-display}\n![](trainers-live-demo_files/figure-html/unnamed-chunk-27-1.png){width=614}\n:::\n:::\n\n\n:::\n\n### Live demo: facetting `infections`\n\nWhen we plotted `body_temperature` and `crp_level` against each other and coloured the data based on `hospital`, we ended up with a rather unclear plot. This is probably because there are no clear differences between the hospitals. However, we can separate these data a bit more clearly by using facets.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(infections, aes(x = body_temperature, y = crp_level,\n                       colour = hospital)) +\n  geom_point() +\n  facet_wrap(facets = vars(hospital))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 215 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](trainers-live-demo_files/figure-html/unnamed-chunk-28-3.png){width=672}\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\np = (ggplot(infections, aes(x = \"body_temperature\", y = \"crp_level\",\n                            colour = \"hospital\")) +\n  geom_point() +\n  facet_wrap(\"~ hospital\"))\n  \np.show()\n```\n\n::: {.cell-output-display}\n![](trainers-live-demo_files/figure-html/unnamed-chunk-29-1.png){width=614}\n:::\n:::\n\n\n:::\n\n## DA3: Manipulating data\n\n## DA4: Organise and combine\n\n",
    "supporting": [
      "trainers-live-demo_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}