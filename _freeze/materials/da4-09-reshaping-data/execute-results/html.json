{
  "hash": "c76742f0ae4216170e993d15ff6e2722",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Reshaping data\n---\n\n::: {.callout-tip}\n#### Learning objectives\n\n- Learn what long and wide data formats are.\n- Be able to recognise when best to use each.\n- Be able to switch from long to wide and back.\n:::\n\n## Context\nSo far, we have provided data in the most convenient format. In real life, this is of course not always the case, because people collect data in a format that works best for them - not the computer. So, sometimes we need to change the shape of our data, so we can calculate or visualise the data we'd like.\n\n## Section setup {#setup_reshaping_data}\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe'll continue this section with the script named `da4-09-reshaping-data.R`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A collection of R packages designed for data science\nlibrary(tidyverse)\n\nsurveys_join <- read_csv(\"data/surveys_join.csv\")\n```\n:::\n\n\n## Python\n\nWe'll continue this section with the script named `da4-09-reshaping-data.py`. If needed, add the following code to the top of your script and run it.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\nsurveys_join = pd.read_csv(\"data/surveys_join.csv\")\n```\n:::\n\n\n:::\n:::\n\n## Data reshaping\n\nLet's look at a hypothetical data set, based on the type of variables we've come across in the `surveys` data.\n\n![Wide and long data formats contain the same information](images/long_and_wide.png){#fig-long_wide}\n\nThe data that is present in both tables is the same - it's just encoded slightly differently.\n\n1. The \"long\" format is where we have a column for each of the types of things we measured or recorded in our data. In other words, each variable has its own column.\n2. The \"wide\" format occurs when we have data relating to the same measured thing in different columns. In this case, we have values related to our *metric* spread across multiple columns (a column each for a year).\n\n::: {.callout-note}\n## Wide or long?\n\nNeither of these formats is necessarily more correct than the other: it will depend on what analysis you intend on doing. However, it is worth mentioning that the \"long\" format is often preferred, as it is clearer how many distinct types of variables we have in the data.\n\nTo figure out which format you might need, it may help to think of which visualisations you may want to build with `ggplot()` (or other packages, for that example). Taking the above example:\n\n* If you were interested in looking at the change of `weight` across years for each individual, then the long format is more suitable to define each aesthetic of such a graph: `aes(x = year, y = weight, colour = record_id)`.\n* If you were interested in the correlation of this metric between 2021 and 2022, then the wide format would be more suitable: `aes(x = yr_2021, y = yr_2022, colour = record_id)`.\n:::\n\n## From long to wide\n\nLet's illustrate that with a dummy data set, called `surveys_join`. In this synthetic data set we have `weight` measurements for individuals across four years: 2021 - 2024. This means that there are four measurements for each `record_id`.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_join <- read_csv(\"data/surveys_join.csv\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_join |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  record_id  year weight\n      <dbl> <dbl>  <dbl>\n1       166  2021   195.\n2       166  2022   190.\n3       166  2023   184.\n4       166  2024   182 \n5       228  2021   192.\n6       228  2022   189 \n```\n\n\n:::\n:::\n\n\nWe can reshape our data from long to wide as follows, where I do *not* overwrite the existing data, but instead just pipe it through to the `head()` function, so we can see what the `pivot_wider()` function is doing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_join |> \n  pivot_wider(names_from = \"year\",\n              values_from = \"weight\",\n              names_prefix = \"yr_\") |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  record_id yr_2021 yr_2022 yr_2023 yr_2024\n      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1       166    195.    190.    184.    182 \n2       228    192.    189     188     179 \n3       337    181.    176.    177     168.\n4       330    172.    170.    165.    157.\n5       205    177.    176.    167.    166.\n6       878    170.    172     167.    161.\n```\n\n\n:::\n:::\n\n\nLet's unpack that a bit. \n\nThe `pivot_wider()` function needs at least the first two arguments:\n\n1. `names_from =` the column who's values we want to use for our new column names (`year`)\n2. `values_from =` the column who's values we want to use to populate these new columns (`weight`)\n3. `names_prefix =` a prefix for our column names (optional)\n\nHere we also add `names_prefix = \"yr_\"`, otherwise the column names would contain only numbers and that's not very good programming habit.\n\nLet's assign it to a new object and then visualise some of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_wide <- surveys_join |> \n  pivot_wider(names_from = \"year\",\n              values_from = \"weight\",\n              names_prefix = \"yr_\")\n```\n:::\n\n\nWe can then use this to visualise possible relationships between the different years:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(surveys_wide, aes(x = yr_2021, y = yr_2022)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Scatterplot of `weight` for 2021 and 2022](da4-09-reshaping-data_files/figure-html/fig-weight_2122-1.png){#fig-weight_2122 width=672}\n:::\n:::\n\n\nIf you'd be interested in comparisons across all years, you'd have to use the original, long format because there isn't a single column in the wide table that contains all of the year information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(surveys_join, aes(x = factor(year), y =  weight)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![Boxplot of `weight` for 2021 - 2024](da4-09-reshaping-data_files/figure-html/fig-weight_by_year-1.png){#fig-weight_by_year width=672}\n:::\n:::\n\n\n## Python\n\n:::\n\n## From wide to long\nWe can reshape our data from wide to long. This is more or less the inverse of what we did above.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_wide |> \n  pivot_longer(cols = -record_id,\n               names_to = \"year\",\n               values_to = \"weight\",\n               names_prefix = \"yr_\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 200 × 3\n   record_id year  weight\n       <dbl> <chr>  <dbl>\n 1       166 2021    195.\n 2       166 2022    190.\n 3       166 2023    184.\n 4       166 2024    182 \n 5       228 2021    192.\n 6       228 2022    189 \n 7       228 2023    188 \n 8       228 2024    179 \n 9       337 2021    181.\n10       337 2022    176.\n# ℹ 190 more rows\n```\n\n\n:::\n:::\n\n\nHere we use the following arguments:\n\n1. `cols =` this tells `pivot_longer()` which columns to pivot - here we want to use all but the `record_id` column\n2. `names_to =` the name of the column that gets to hold the column names (e.g. `yr_2021`, `yr_2022` ...)\n3. `values_to =` the name of the column that will contain the measured values (here those are the `weight` measurements)\n4. `names_prefix =` here we tell it that all column names have a prefix `yr_`, which then gets removed prior to populating the column\n\n## Python\n:::\n\n\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- \n:::\n",
    "supporting": [
      "da4-09-reshaping-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}